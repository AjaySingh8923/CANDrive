
CAN_NODE_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006198  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08006328  08006328  00007328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063fc  080063fc  00008014  2**0
                  CONTENTS
  4 .ARM          00000008  080063fc  080063fc  000073fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006404  08006404  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006404  08006404  00007404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006408  08006408  00007408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  0800640c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008014  2**0
                  CONTENTS
 10 .bss          000134a4  20000014  20000014  00008014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200134b8  200134b8  00008014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016380  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002de8  00000000  00000000  0001e3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001530  00000000  00000000  000211b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001082  00000000  00000000  000226e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023dbd  00000000  00000000  00023762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017c0e  00000000  00000000  0004751f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e888e  00000000  00000000  0005f12d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001479bb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ac4  00000000  00000000  00147a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000092  00000000  00000000  0014d4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006310 	.word	0x08006310

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08006310 	.word	0x08006310

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012eec 	.word	0x20012eec

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fbc5 	bl	8000ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f82f 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f8f9 	bl	8000758 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000566:	f000 f893 	bl	8000690 <MX_CAN1_Init>
  MX_I2C2_Init();
 800056a:	f000 f8c7 	bl	80006fc <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  xTaskCreate(Read_Temperature, "Read_Temperature", STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL);
 800056e:	2300      	movs	r3, #0
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2301      	movs	r3, #1
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2300      	movs	r3, #0
 8000578:	2280      	movs	r2, #128	@ 0x80
 800057a:	490c      	ldr	r1, [pc, #48]	@ (80005ac <main+0x58>)
 800057c:	480c      	ldr	r0, [pc, #48]	@ (80005b0 <main+0x5c>)
 800057e:	f003 fb37 	bl	8003bf0 <xTaskCreate>
  xTaskCreate(Transmit_Packet_To_CanNode1, "Transmit_Packet_To_CanNode1", STACK_SIZE, NULL, tskIDLE_PRIORITY+2, NULL);
 8000582:	2300      	movs	r3, #0
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	2302      	movs	r3, #2
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2300      	movs	r3, #0
 800058c:	2280      	movs	r2, #128	@ 0x80
 800058e:	4909      	ldr	r1, [pc, #36]	@ (80005b4 <main+0x60>)
 8000590:	4809      	ldr	r0, [pc, #36]	@ (80005b8 <main+0x64>)
 8000592:	f003 fb2d 	bl	8003bf0 <xTaskCreate>

  tasksCreated = uxTaskGetNumberOfTasks();
 8000596:	f003 fe55 	bl	8004244 <uxTaskGetNumberOfTasks>
 800059a:	4603      	mov	r3, r0
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b07      	ldr	r3, [pc, #28]	@ (80005bc <main+0x68>)
 80005a0:	701a      	strb	r2, [r3, #0]

  vTaskStartScheduler();
 80005a2:	f003 fce5 	bl	8003f70 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a6:	bf00      	nop
 80005a8:	e7fd      	b.n	80005a6 <main+0x52>
 80005aa:	bf00      	nop
 80005ac:	08006328 	.word	0x08006328
 80005b0:	08000875 	.word	0x08000875
 80005b4:	0800633c 	.word	0x0800633c
 80005b8:	080008c5 	.word	0x080008c5
 80005bc:	200000ac 	.word	0x200000ac

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	@ 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	@ 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f005 fe64 	bl	800629c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b27      	ldr	r3, [pc, #156]	@ (8000688 <SystemClock_Config+0xc8>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ec:	4a26      	ldr	r2, [pc, #152]	@ (8000688 <SystemClock_Config+0xc8>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f4:	4b24      	ldr	r3, [pc, #144]	@ (8000688 <SystemClock_Config+0xc8>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b21      	ldr	r3, [pc, #132]	@ (800068c <SystemClock_Config+0xcc>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a20      	ldr	r2, [pc, #128]	@ (800068c <SystemClock_Config+0xcc>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b1e      	ldr	r3, [pc, #120]	@ (800068c <SystemClock_Config+0xcc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061c:	2301      	movs	r3, #1
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000620:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000624:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800062e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000630:	2304      	movs	r3, #4
 8000632:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000634:	2348      	movs	r3, #72	@ 0x48
 8000636:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000638:	2306      	movs	r3, #6
 800063a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f002 fad7 	bl	8002bf8 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000650:	f000 f99c 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2302      	movs	r3, #2
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f002 fd3a 	bl	80030e8 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800067a:	f000 f987 	bl	800098c <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	@ 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000694:	4b17      	ldr	r3, [pc, #92]	@ (80006f4 <MX_CAN1_Init+0x64>)
 8000696:	4a18      	ldr	r2, [pc, #96]	@ (80006f8 <MX_CAN1_Init+0x68>)
 8000698:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 24;
 800069a:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <MX_CAN1_Init+0x64>)
 800069c:	2218      	movs	r2, #24
 800069e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006a0:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <MX_CAN1_Init+0x64>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006a6:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <MX_CAN1_Init+0x64>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80006ac:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <MX_CAN1_Init+0x64>)
 80006ae:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80006b2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <MX_CAN1_Init+0x64>)
 80006b6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80006ba:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <MX_CAN1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <MX_CAN1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <MX_CAN1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006ce:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <MX_CAN1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	@ (80006f4 <MX_CAN1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006da:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <MX_CAN1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	@ (80006f4 <MX_CAN1_Init+0x64>)
 80006e2:	f000 fb43 	bl	8000d6c <HAL_CAN_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80006ec:	f000 f94e 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000030 	.word	0x20000030
 80006f8:	40006400 	.word	0x40006400

080006fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_I2C2_Init+0x50>)
 8000702:	4a13      	ldr	r2, [pc, #76]	@ (8000750 <MX_I2C2_Init+0x54>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_I2C2_Init+0x50>)
 8000708:	4a12      	ldr	r2, [pc, #72]	@ (8000754 <MX_I2C2_Init+0x58>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_I2C2_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 144;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_I2C2_Init+0x50>)
 8000714:	2290      	movs	r2, #144	@ 0x90
 8000716:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_I2C2_Init+0x50>)
 800071a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800071e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <MX_I2C2_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_I2C2_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	@ (800074c <MX_I2C2_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_I2C2_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <MX_I2C2_Init+0x50>)
 800073a:	f001 fa63 	bl	8001c04 <HAL_I2C_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 f922 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000058 	.word	0x20000058
 8000750:	40005800 	.word	0x40005800
 8000754:	000186a0 	.word	0x000186a0

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	@ 0x28
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	4b32      	ldr	r3, [pc, #200]	@ (800083c <MX_GPIO_Init+0xe4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a31      	ldr	r2, [pc, #196]	@ (800083c <MX_GPIO_Init+0xe4>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b2f      	ldr	r3, [pc, #188]	@ (800083c <MX_GPIO_Init+0xe4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	4b2b      	ldr	r3, [pc, #172]	@ (800083c <MX_GPIO_Init+0xe4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a2a      	ldr	r2, [pc, #168]	@ (800083c <MX_GPIO_Init+0xe4>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b28      	ldr	r3, [pc, #160]	@ (800083c <MX_GPIO_Init+0xe4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	4b24      	ldr	r3, [pc, #144]	@ (800083c <MX_GPIO_Init+0xe4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a23      	ldr	r2, [pc, #140]	@ (800083c <MX_GPIO_Init+0xe4>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b21      	ldr	r3, [pc, #132]	@ (800083c <MX_GPIO_Init+0xe4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b1d      	ldr	r3, [pc, #116]	@ (800083c <MX_GPIO_Init+0xe4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a1c      	ldr	r2, [pc, #112]	@ (800083c <MX_GPIO_Init+0xe4>)
 80007cc:	f043 0308 	orr.w	r3, r3, #8
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <MX_GPIO_Init+0xe4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0308 	and.w	r3, r3, #8
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 80007e4:	4816      	ldr	r0, [pc, #88]	@ (8000840 <MX_GPIO_Init+0xe8>)
 80007e6:	f001 f9d9 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007ea:	2320      	movs	r3, #32
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007ee:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80007f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4619      	mov	r1, r3
 80007fe:	4811      	ldr	r0, [pc, #68]	@ (8000844 <MX_GPIO_Init+0xec>)
 8000800:	f001 f830 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000804:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	4808      	ldr	r0, [pc, #32]	@ (8000840 <MX_GPIO_Init+0xe8>)
 800081e:	f001 f821 	bl	8001864 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2106      	movs	r1, #6
 8000826:	2017      	movs	r0, #23
 8000828:	f000 fff2 	bl	8001810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800082c:	2017      	movs	r0, #23
 800082e:	f001 f80b 	bl	8001848 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000832:	bf00      	nop
 8000834:	3728      	adds	r7, #40	@ 0x28
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800
 8000840:	40020c00 	.word	0x40020c00
 8000844:	40020000 	.word	0x40020000

08000848 <HAL_CAN_TxMailbox0CompleteCallback>:
		}
	}
}

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	//Green LED will toggle after every successful CAN transmission
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);	//FOR INTERRUPTS
 8000850:	2101      	movs	r1, #1
 8000852:	4806      	ldr	r0, [pc, #24]	@ (800086c <HAL_CAN_TxMailbox0CompleteCallback+0x24>)
 8000854:	f000 fcce 	bl	80011f4 <HAL_CAN_ActivateNotification>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000858:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800085c:	4804      	ldr	r0, [pc, #16]	@ (8000870 <HAL_CAN_TxMailbox0CompleteCallback+0x28>)
 800085e:	f001 f9b6 	bl	8001bce <HAL_GPIO_TogglePin>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000030 	.word	0x20000030
 8000870:	40020c00 	.word	0x40020c00

08000874 <Read_Temperature>:

void Read_Temperature(void * argument)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af02      	add	r7, sp, #8
 800087a:	6078      	str	r0, [r7, #4]
	uint8_t register_addr = TMP102_REG_ADDR;
 800087c:	2300      	movs	r3, #0
 800087e:	72bb      	strb	r3, [r7, #10]
	uint8_t tx_status;
	uint32_t TxData = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		tx_status = HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)TMP102_I2C_ADDR << 1, &register_addr, 1, 100);
 8000884:	f107 020a 	add.w	r2, r7, #10
 8000888:	2364      	movs	r3, #100	@ 0x64
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	2301      	movs	r3, #1
 800088e:	2190      	movs	r1, #144	@ 0x90
 8000890:	480a      	ldr	r0, [pc, #40]	@ (80008bc <Read_Temperature+0x48>)
 8000892:	f001 fafb 	bl	8001e8c <HAL_I2C_Master_Transmit>
 8000896:	4603      	mov	r3, r0
 8000898:	72fb      	strb	r3, [r7, #11]
		if(tx_status == HAL_OK)
 800089a:	7afb      	ldrb	r3, [r7, #11]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d107      	bne.n	80008b0 <Read_Temperature+0x3c>
		{
			HAL_I2C_Master_Receive(&hi2c2, (uint16_t)TMP102_I2C_ADDR << 1, (uint8_t *)Temperature_C, 2, 100);
 80008a0:	2364      	movs	r3, #100	@ 0x64
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2302      	movs	r3, #2
 80008a6:	4a06      	ldr	r2, [pc, #24]	@ (80008c0 <Read_Temperature+0x4c>)
 80008a8:	2190      	movs	r1, #144	@ 0x90
 80008aa:	4804      	ldr	r0, [pc, #16]	@ (80008bc <Read_Temperature+0x48>)
 80008ac:	f001 fbec 	bl	8002088 <HAL_I2C_Master_Receive>
		}

		//data read periodically after every 1000ms(1 second)
		vTaskDelay(pdMS_TO_TICKS(800));
 80008b0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80008b4:	f003 fb26 	bl	8003f04 <vTaskDelay>
		tx_status = HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)TMP102_I2C_ADDR << 1, &register_addr, 1, 100);
 80008b8:	e7e4      	b.n	8000884 <Read_Temperature+0x10>
 80008ba:	bf00      	nop
 80008bc:	20000058 	.word	0x20000058
 80008c0:	200000b4 	.word	0x200000b4

080008c4 <Transmit_Packet_To_CanNode1>:
	}
}

void Transmit_Packet_To_CanNode1(void * argument)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);	//FOR INTERRUPTS
 80008cc:	2101      	movs	r1, #1
 80008ce:	4820      	ldr	r0, [pc, #128]	@ (8000950 <Transmit_Packet_To_CanNode1+0x8c>)
 80008d0:	f000 fc90 	bl	80011f4 <HAL_CAN_ActivateNotification>
	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 80008d4:	481e      	ldr	r0, [pc, #120]	@ (8000950 <Transmit_Packet_To_CanNode1+0x8c>)
 80008d6:	f000 fb44 	bl	8000f62 <HAL_CAN_Start>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <Transmit_Packet_To_CanNode1+0x20>
	{
		Error_Handler();
 80008e0:	f000 f854 	bl	800098c <Error_Handler>
	}

	while(1)
	{
		//header of transmission packet
		TxHeader.StdId = 0x099;
 80008e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000954 <Transmit_Packet_To_CanNode1+0x90>)
 80008e6:	2299      	movs	r2, #153	@ 0x99
 80008e8:	601a      	str	r2, [r3, #0]
		TxHeader.RTR = CAN_RTR_DATA;
 80008ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000954 <Transmit_Packet_To_CanNode1+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
		TxHeader.IDE = CAN_ID_STD;
 80008f0:	4b18      	ldr	r3, [pc, #96]	@ (8000954 <Transmit_Packet_To_CanNode1+0x90>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
		TxHeader.DLC = 2;
 80008f6:	4b17      	ldr	r3, [pc, #92]	@ (8000954 <Transmit_Packet_To_CanNode1+0x90>)
 80008f8:	2202      	movs	r2, #2
 80008fa:	611a      	str	r2, [r3, #16]
		TxHeader.TransmitGlobalTime = DISABLE;
 80008fc:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <Transmit_Packet_To_CanNode1+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	751a      	strb	r2, [r3, #20]
		TransmitData[0] = Temperature_C[0];
 8000902:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <Transmit_Packet_To_CanNode1+0x94>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b2da      	uxtb	r2, r3
 8000908:	4b14      	ldr	r3, [pc, #80]	@ (800095c <Transmit_Packet_To_CanNode1+0x98>)
 800090a:	701a      	strb	r2, [r3, #0]
		TransmitData[1] = Temperature_C[1] | door_status;
 800090c:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <Transmit_Packet_To_CanNode1+0x94>)
 800090e:	785b      	ldrb	r3, [r3, #1]
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <Transmit_Packet_To_CanNode1+0x9c>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	4313      	orrs	r3, r2
 800091a:	b2da      	uxtb	r2, r3
 800091c:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <Transmit_Packet_To_CanNode1+0x98>)
 800091e:	705a      	strb	r2, [r3, #1]

		//transmission Request
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TransmitData, &TxMailbox) != HAL_OK)
 8000920:	4b10      	ldr	r3, [pc, #64]	@ (8000964 <Transmit_Packet_To_CanNode1+0xa0>)
 8000922:	4a0e      	ldr	r2, [pc, #56]	@ (800095c <Transmit_Packet_To_CanNode1+0x98>)
 8000924:	490b      	ldr	r1, [pc, #44]	@ (8000954 <Transmit_Packet_To_CanNode1+0x90>)
 8000926:	480a      	ldr	r0, [pc, #40]	@ (8000950 <Transmit_Packet_To_CanNode1+0x8c>)
 8000928:	f000 fb5f 	bl	8000fea <HAL_CAN_AddTxMessage>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <Transmit_Packet_To_CanNode1+0x72>
		{
			Error_Handler();
 8000932:	f000 f82b 	bl	800098c <Error_Handler>
		}

		//Wait for transmission to complete
		//HAL_CAN_GetTxMailboxesFreeLevel To get no of free Tx Mailboxes, wait until at least 3 Mailbox is free
		while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {}
 8000936:	bf00      	nop
 8000938:	4805      	ldr	r0, [pc, #20]	@ (8000950 <Transmit_Packet_To_CanNode1+0x8c>)
 800093a:	f000 fc26 	bl	800118a <HAL_CAN_GetTxMailboxesFreeLevel>
 800093e:	4603      	mov	r3, r0
 8000940:	2b03      	cmp	r3, #3
 8000942:	d1f9      	bne.n	8000938 <Transmit_Packet_To_CanNode1+0x74>

		vTaskDelay(pdMS_TO_TICKS(1000));
 8000944:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000948:	f003 fadc 	bl	8003f04 <vTaskDelay>
		TxHeader.StdId = 0x099;
 800094c:	e7ca      	b.n	80008e4 <Transmit_Packet_To_CanNode1+0x20>
 800094e:	bf00      	nop
 8000950:	20000030 	.word	0x20000030
 8000954:	200000bc 	.word	0x200000bc
 8000958:	200000b4 	.word	0x200000b4
 800095c:	200000b0 	.word	0x200000b0
 8000960:	200000b6 	.word	0x200000b6
 8000964:	200000b8 	.word	0x200000b8

08000968 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a04      	ldr	r2, [pc, #16]	@ (8000988 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d101      	bne.n	800097e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800097a:	f000 f9d7 	bl	8000d2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40010000 	.word	0x40010000

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800099a:	4802      	ldr	r0, [pc, #8]	@ (80009a4 <Error_Handler+0x18>)
 800099c:	f001 f8fe 	bl	8001b9c <HAL_GPIO_WritePin>
 80009a0:	e7f8      	b.n	8000994 <Error_Handler+0x8>
 80009a2:	bf00      	nop
 80009a4:	40020c00 	.word	0x40020c00

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b10      	ldr	r3, [pc, #64]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b6:	4a0f      	ldr	r2, [pc, #60]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009be:	4b0d      	ldr	r3, [pc, #52]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d2:	4a08      	ldr	r2, [pc, #32]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800

080009f8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	@ 0x28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a1d      	ldr	r2, [pc, #116]	@ (8000a8c <HAL_CAN_MspInit+0x94>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d134      	bne.n	8000a84 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <HAL_CAN_MspInit+0x98>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	4a1b      	ldr	r2, [pc, #108]	@ (8000a90 <HAL_CAN_MspInit+0x98>)
 8000a24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2a:	4b19      	ldr	r3, [pc, #100]	@ (8000a90 <HAL_CAN_MspInit+0x98>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <HAL_CAN_MspInit+0x98>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a14      	ldr	r2, [pc, #80]	@ (8000a90 <HAL_CAN_MspInit+0x98>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <HAL_CAN_MspInit+0x98>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a52:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a64:	2309      	movs	r3, #9
 8000a66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4809      	ldr	r0, [pc, #36]	@ (8000a94 <HAL_CAN_MspInit+0x9c>)
 8000a70:	f000 fef8 	bl	8001864 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2100      	movs	r1, #0
 8000a78:	2014      	movs	r0, #20
 8000a7a:	f000 fec9 	bl	8001810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a7e:	2014      	movs	r0, #20
 8000a80:	f000 fee2 	bl	8001848 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	@ 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40006400 	.word	0x40006400
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020400 	.word	0x40020400

08000a98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	@ 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a19      	ldr	r2, [pc, #100]	@ (8000b1c <HAL_I2C_MspInit+0x84>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d12c      	bne.n	8000b14 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b18      	ldr	r3, [pc, #96]	@ (8000b20 <HAL_I2C_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a17      	ldr	r2, [pc, #92]	@ (8000b20 <HAL_I2C_MspInit+0x88>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <HAL_I2C_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ad6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000adc:	2312      	movs	r3, #18
 8000ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	480c      	ldr	r0, [pc, #48]	@ (8000b24 <HAL_I2C_MspInit+0x8c>)
 8000af4:	f000 feb6 	bl	8001864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <HAL_I2C_MspInit+0x88>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b00:	4a07      	ldr	r2, [pc, #28]	@ (8000b20 <HAL_I2C_MspInit+0x88>)
 8000b02:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b08:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <HAL_I2C_MspInit+0x88>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000b14:	bf00      	nop
 8000b16:	3728      	adds	r7, #40	@ 0x28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40005800 	.word	0x40005800
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020400 	.word	0x40020400

08000b28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08c      	sub	sp, #48	@ 0x30
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8000bfc <HAL_InitTick+0xd4>)
 8000b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b40:	4a2e      	ldr	r2, [pc, #184]	@ (8000bfc <HAL_InitTick+0xd4>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b48:	4b2c      	ldr	r3, [pc, #176]	@ (8000bfc <HAL_InitTick+0xd4>)
 8000b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b54:	f107 020c 	add.w	r2, r7, #12
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f002 fce2 	bl	8003528 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b64:	f002 fccc 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b70:	4a23      	ldr	r2, [pc, #140]	@ (8000c00 <HAL_InitTick+0xd8>)
 8000b72:	fba2 2303 	umull	r2, r3, r2, r3
 8000b76:	0c9b      	lsrs	r3, r3, #18
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b7c:	4b21      	ldr	r3, [pc, #132]	@ (8000c04 <HAL_InitTick+0xdc>)
 8000b7e:	4a22      	ldr	r2, [pc, #136]	@ (8000c08 <HAL_InitTick+0xe0>)
 8000b80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b82:	4b20      	ldr	r3, [pc, #128]	@ (8000c04 <HAL_InitTick+0xdc>)
 8000b84:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b88:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8000c04 <HAL_InitTick+0xdc>)
 8000b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b8e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b90:	4b1c      	ldr	r3, [pc, #112]	@ (8000c04 <HAL_InitTick+0xdc>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b96:	4b1b      	ldr	r3, [pc, #108]	@ (8000c04 <HAL_InitTick+0xdc>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9c:	4b19      	ldr	r3, [pc, #100]	@ (8000c04 <HAL_InitTick+0xdc>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ba2:	4818      	ldr	r0, [pc, #96]	@ (8000c04 <HAL_InitTick+0xdc>)
 8000ba4:	f002 fcf2 	bl	800358c <HAL_TIM_Base_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000bae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d11b      	bne.n	8000bee <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000bb6:	4813      	ldr	r0, [pc, #76]	@ (8000c04 <HAL_InitTick+0xdc>)
 8000bb8:	f002 fd42 	bl	8003640 <HAL_TIM_Base_Start_IT>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000bc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d111      	bne.n	8000bee <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bca:	2019      	movs	r0, #25
 8000bcc:	f000 fe3c 	bl	8001848 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b0f      	cmp	r3, #15
 8000bd4:	d808      	bhi.n	8000be8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	6879      	ldr	r1, [r7, #4]
 8000bda:	2019      	movs	r0, #25
 8000bdc:	f000 fe18 	bl	8001810 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be0:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <HAL_InitTick+0xe4>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	e002      	b.n	8000bee <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000bee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3730      	adds	r7, #48	@ 0x30
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	431bde83 	.word	0x431bde83
 8000c04:	200000d4 	.word	0x200000d4
 8000c08:	40010000 	.word	0x40010000
 8000c0c:	20000004 	.word	0x20000004

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <NMI_Handler+0x4>

08000c18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <MemManage_Handler+0x4>

08000c28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c4c:	4802      	ldr	r0, [pc, #8]	@ (8000c58 <CAN1_RX0_IRQHandler+0x10>)
 8000c4e:	f000 faf7 	bl	8001240 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000030 	.word	0x20000030

08000c5c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c60:	4802      	ldr	r0, [pc, #8]	@ (8000c6c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c62:	f002 fd5d 	bl	8003720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200000d4 	.word	0x200000d4

08000c70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <SystemInit+0x20>)
 8000c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c7a:	4a05      	ldr	r2, [pc, #20]	@ (8000c90 <SystemInit+0x20>)
 8000c7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ccc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c98:	f7ff ffea 	bl	8000c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c9c:	480c      	ldr	r0, [pc, #48]	@ (8000cd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c9e:	490d      	ldr	r1, [pc, #52]	@ (8000cd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca4:	e002      	b.n	8000cac <LoopCopyDataInit>

08000ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000caa:	3304      	adds	r3, #4

08000cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb0:	d3f9      	bcc.n	8000ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ce0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb8:	e001      	b.n	8000cbe <LoopFillZerobss>

08000cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cbc:	3204      	adds	r2, #4

08000cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc0:	d3fb      	bcc.n	8000cba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc2:	f005 faf3 	bl	80062ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc6:	f7ff fc45 	bl	8000554 <main>
  bx  lr    
 8000cca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ccc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000cd8:	0800640c 	.word	0x0800640c
  ldr r2, =_sbss
 8000cdc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ce0:	200134b8 	.word	0x200134b8

08000ce4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <ADC_IRQHandler>
	...

08000ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cec:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d28 <HAL_Init+0x40>)
 8000cf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <HAL_Init+0x40>)
 8000cfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d04:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a07      	ldr	r2, [pc, #28]	@ (8000d28 <HAL_Init+0x40>)
 8000d0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 fd72 	bl	80017fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d16:	200f      	movs	r0, #15
 8000d18:	f7ff ff06 	bl	8000b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d1c:	f7ff fe44 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023c00 	.word	0x40023c00

08000d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d30:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <HAL_IncTick+0x20>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <HAL_IncTick+0x24>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a04      	ldr	r2, [pc, #16]	@ (8000d50 <HAL_IncTick+0x24>)
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	2000011c 	.word	0x2000011c

08000d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return uwTick;
 8000d58:	4b03      	ldr	r3, [pc, #12]	@ (8000d68 <HAL_GetTick+0x14>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	2000011c 	.word	0x2000011c

08000d6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e0ed      	b.n	8000f5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d102      	bne.n	8000d90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff fe34 	bl	80009f8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f042 0201 	orr.w	r2, r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000da0:	f7ff ffd8 	bl	8000d54 <HAL_GetTick>
 8000da4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000da6:	e012      	b.n	8000dce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000da8:	f7ff ffd4 	bl	8000d54 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b0a      	cmp	r3, #10
 8000db4:	d90b      	bls.n	8000dce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2205      	movs	r2, #5
 8000dc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e0c5      	b.n	8000f5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d0e5      	beq.n	8000da8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f022 0202 	bic.w	r2, r2, #2
 8000dea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dec:	f7ff ffb2 	bl	8000d54 <HAL_GetTick>
 8000df0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000df2:	e012      	b.n	8000e1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000df4:	f7ff ffae 	bl	8000d54 <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2b0a      	cmp	r3, #10
 8000e00:	d90b      	bls.n	8000e1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e06:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2205      	movs	r2, #5
 8000e12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e09f      	b.n	8000f5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1e5      	bne.n	8000df4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	7e1b      	ldrb	r3, [r3, #24]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d108      	bne.n	8000e42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	e007      	b.n	8000e52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	7e5b      	ldrb	r3, [r3, #25]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d108      	bne.n	8000e6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	e007      	b.n	8000e7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000e7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	7e9b      	ldrb	r3, [r3, #26]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d108      	bne.n	8000e96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f042 0220 	orr.w	r2, r2, #32
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	e007      	b.n	8000ea6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 0220 	bic.w	r2, r2, #32
 8000ea4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	7edb      	ldrb	r3, [r3, #27]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d108      	bne.n	8000ec0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 0210 	bic.w	r2, r2, #16
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	e007      	b.n	8000ed0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f042 0210 	orr.w	r2, r2, #16
 8000ece:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7f1b      	ldrb	r3, [r3, #28]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d108      	bne.n	8000eea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f042 0208 	orr.w	r2, r2, #8
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	e007      	b.n	8000efa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f022 0208 	bic.w	r2, r2, #8
 8000ef8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	7f5b      	ldrb	r3, [r3, #29]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d108      	bne.n	8000f14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f042 0204 	orr.w	r2, r2, #4
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	e007      	b.n	8000f24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f022 0204 	bic.w	r2, r2, #4
 8000f22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	431a      	orrs	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	691b      	ldr	r3, [r3, #16]
 8000f32:	431a      	orrs	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	695b      	ldr	r3, [r3, #20]
 8000f38:	ea42 0103 	orr.w	r1, r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	1e5a      	subs	r2, r3, #1
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	430a      	orrs	r2, r1
 8000f48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2201      	movs	r2, #1
 8000f54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b084      	sub	sp, #16
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d12e      	bne.n	8000fd4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2202      	movs	r2, #2
 8000f7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 0201 	bic.w	r2, r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f8e:	f7ff fee1 	bl	8000d54 <HAL_GetTick>
 8000f92:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f94:	e012      	b.n	8000fbc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f96:	f7ff fedd 	bl	8000d54 <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b0a      	cmp	r3, #10
 8000fa2:	d90b      	bls.n	8000fbc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2205      	movs	r2, #5
 8000fb4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e012      	b.n	8000fe2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1e5      	bne.n	8000f96 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	e006      	b.n	8000fe2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fd8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
  }
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b089      	sub	sp, #36	@ 0x24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	60f8      	str	r0, [r7, #12]
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ffe:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001008:	7ffb      	ldrb	r3, [r7, #31]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d003      	beq.n	8001016 <HAL_CAN_AddTxMessage+0x2c>
 800100e:	7ffb      	ldrb	r3, [r7, #31]
 8001010:	2b02      	cmp	r3, #2
 8001012:	f040 80ad 	bne.w	8001170 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d10a      	bne.n	8001036 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001026:	2b00      	cmp	r3, #0
 8001028:	d105      	bne.n	8001036 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001030:	2b00      	cmp	r3, #0
 8001032:	f000 8095 	beq.w	8001160 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	0e1b      	lsrs	r3, r3, #24
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001040:	2201      	movs	r2, #1
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	409a      	lsls	r2, r3
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d10d      	bne.n	800106e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800105c:	68f9      	ldr	r1, [r7, #12]
 800105e:	6809      	ldr	r1, [r1, #0]
 8001060:	431a      	orrs	r2, r3
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3318      	adds	r3, #24
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	440b      	add	r3, r1
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	e00f      	b.n	800108e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001078:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800107e:	68f9      	ldr	r1, [r7, #12]
 8001080:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001082:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	3318      	adds	r3, #24
 8001088:	011b      	lsls	r3, r3, #4
 800108a:	440b      	add	r3, r1
 800108c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6819      	ldr	r1, [r3, #0]
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	691a      	ldr	r2, [r3, #16]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3318      	adds	r3, #24
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	440b      	add	r3, r1
 800109e:	3304      	adds	r3, #4
 80010a0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	7d1b      	ldrb	r3, [r3, #20]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d111      	bne.n	80010ce <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	3318      	adds	r3, #24
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	4413      	add	r3, r2
 80010b6:	3304      	adds	r3, #4
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	6811      	ldr	r1, [r2, #0]
 80010be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3318      	adds	r3, #24
 80010c6:	011b      	lsls	r3, r3, #4
 80010c8:	440b      	add	r3, r1
 80010ca:	3304      	adds	r3, #4
 80010cc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3307      	adds	r3, #7
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	061a      	lsls	r2, r3, #24
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3306      	adds	r3, #6
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	041b      	lsls	r3, r3, #16
 80010de:	431a      	orrs	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3305      	adds	r3, #5
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	4313      	orrs	r3, r2
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	3204      	adds	r2, #4
 80010ee:	7812      	ldrb	r2, [r2, #0]
 80010f0:	4610      	mov	r0, r2
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	6811      	ldr	r1, [r2, #0]
 80010f6:	ea43 0200 	orr.w	r2, r3, r0
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	011b      	lsls	r3, r3, #4
 80010fe:	440b      	add	r3, r1
 8001100:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001104:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3303      	adds	r3, #3
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	061a      	lsls	r2, r3, #24
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3302      	adds	r3, #2
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	041b      	lsls	r3, r3, #16
 8001116:	431a      	orrs	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3301      	adds	r3, #1
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	4313      	orrs	r3, r2
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	7812      	ldrb	r2, [r2, #0]
 8001126:	4610      	mov	r0, r2
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	6811      	ldr	r1, [r2, #0]
 800112c:	ea43 0200 	orr.w	r2, r3, r0
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	011b      	lsls	r3, r3, #4
 8001134:	440b      	add	r3, r1
 8001136:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800113a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	3318      	adds	r3, #24
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	4413      	add	r3, r2
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	6811      	ldr	r1, [r2, #0]
 800114e:	f043 0201 	orr.w	r2, r3, #1
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	3318      	adds	r3, #24
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	440b      	add	r3, r1
 800115a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	e00e      	b.n	800117e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001164:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e006      	b.n	800117e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001174:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
  }
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	@ 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800118a:	b480      	push	{r7}
 800118c:	b085      	sub	sp, #20
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f893 3020 	ldrb.w	r3, [r3, #32]
 800119c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800119e:	7afb      	ldrb	r3, [r7, #11]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d002      	beq.n	80011aa <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80011a4:	7afb      	ldrb	r3, [r7, #11]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d11d      	bne.n	80011e6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d002      	beq.n	80011be <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	3301      	adds	r3, #1
 80011bc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d002      	beq.n	80011d2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3301      	adds	r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d002      	beq.n	80011e6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3301      	adds	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80011e6:	68fb      	ldr	r3, [r7, #12]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001204:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d002      	beq.n	8001212 <HAL_CAN_ActivateNotification+0x1e>
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d109      	bne.n	8001226 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6959      	ldr	r1, [r3, #20]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	430a      	orrs	r2, r1
 8001220:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	e006      	b.n	8001234 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800122a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
  }
}
 8001234:	4618      	mov	r0, r3
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	@ 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001248:	2300      	movs	r3, #0
 800124a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d07c      	beq.n	8001380 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	2b00      	cmp	r3, #0
 800128e:	d023      	beq.n	80012d8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2201      	movs	r2, #1
 8001296:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff fad0 	bl	8000848 <HAL_CAN_TxMailbox0CompleteCallback>
 80012a8:	e016      	b.n	80012d8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d004      	beq.n	80012be <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80012b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80012bc:	e00c      	b.n	80012d8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d004      	beq.n	80012d2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80012c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80012d0:	e002      	b.n	80012d8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 f97f 	bl	80015d6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d024      	beq.n	800132c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 f959 	bl	80015ae <HAL_CAN_TxMailbox1CompleteCallback>
 80012fc:	e016      	b.n	800132c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001304:	2b00      	cmp	r3, #0
 8001306:	d004      	beq.n	8001312 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001310:	e00c      	b.n	800132c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001318:	2b00      	cmp	r3, #0
 800131a:	d004      	beq.n	8001326 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800131c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001322:	627b      	str	r3, [r7, #36]	@ 0x24
 8001324:	e002      	b.n	800132c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 f95f 	bl	80015ea <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d024      	beq.n	8001380 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800133e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 f939 	bl	80015c2 <HAL_CAN_TxMailbox2CompleteCallback>
 8001350:	e016      	b.n	8001380 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d004      	beq.n	8001366 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800135c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
 8001364:	e00c      	b.n	8001380 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d004      	beq.n	800137a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001372:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24
 8001378:	e002      	b.n	8001380 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 f93f 	bl	80015fe <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001380:	6a3b      	ldr	r3, [r7, #32]
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00c      	beq.n	80013a4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	f003 0310 	and.w	r3, r3, #16
 8001390:	2b00      	cmp	r3, #0
 8001392:	d007      	beq.n	80013a4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001396:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2210      	movs	r2, #16
 80013a2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00b      	beq.n	80013c6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d006      	beq.n	80013c6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2208      	movs	r2, #8
 80013be:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 f930 	bl	8001626 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d009      	beq.n	80013e4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d002      	beq.n	80013e4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 f917 	bl	8001612 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80013e4:	6a3b      	ldr	r3, [r7, #32]
 80013e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00c      	beq.n	8001408 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	f003 0310 	and.w	r3, r3, #16
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d007      	beq.n	8001408 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80013f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013fe:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2210      	movs	r2, #16
 8001406:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	f003 0320 	and.w	r3, r3, #32
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00b      	beq.n	800142a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	2b00      	cmp	r3, #0
 800141a:	d006      	beq.n	800142a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2208      	movs	r2, #8
 8001422:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 f912 	bl	800164e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	f003 0310 	and.w	r3, r3, #16
 8001430:	2b00      	cmp	r3, #0
 8001432:	d009      	beq.n	8001448 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d002      	beq.n	8001448 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f8f9 	bl	800163a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001448:	6a3b      	ldr	r3, [r7, #32]
 800144a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00b      	beq.n	800146a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	f003 0310 	and.w	r3, r3, #16
 8001458:	2b00      	cmp	r3, #0
 800145a:	d006      	beq.n	800146a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2210      	movs	r2, #16
 8001462:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 f8fc 	bl	8001662 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00b      	beq.n	800148c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b00      	cmp	r3, #0
 800147c:	d006      	beq.n	800148c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2208      	movs	r2, #8
 8001484:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 f8f5 	bl	8001676 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800148c:	6a3b      	ldr	r3, [r7, #32]
 800148e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d07b      	beq.n	800158e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	d072      	beq.n	8001586 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d008      	beq.n	80014bc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80014b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d008      	beq.n	80014d8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80014d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d2:	f043 0302 	orr.w	r3, r3, #2
 80014d6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d008      	beq.n	80014f4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80014ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ee:	f043 0304 	orr.w	r3, r3, #4
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d043      	beq.n	8001586 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001504:	2b00      	cmp	r3, #0
 8001506:	d03e      	beq.n	8001586 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800150e:	2b60      	cmp	r3, #96	@ 0x60
 8001510:	d02b      	beq.n	800156a <HAL_CAN_IRQHandler+0x32a>
 8001512:	2b60      	cmp	r3, #96	@ 0x60
 8001514:	d82e      	bhi.n	8001574 <HAL_CAN_IRQHandler+0x334>
 8001516:	2b50      	cmp	r3, #80	@ 0x50
 8001518:	d022      	beq.n	8001560 <HAL_CAN_IRQHandler+0x320>
 800151a:	2b50      	cmp	r3, #80	@ 0x50
 800151c:	d82a      	bhi.n	8001574 <HAL_CAN_IRQHandler+0x334>
 800151e:	2b40      	cmp	r3, #64	@ 0x40
 8001520:	d019      	beq.n	8001556 <HAL_CAN_IRQHandler+0x316>
 8001522:	2b40      	cmp	r3, #64	@ 0x40
 8001524:	d826      	bhi.n	8001574 <HAL_CAN_IRQHandler+0x334>
 8001526:	2b30      	cmp	r3, #48	@ 0x30
 8001528:	d010      	beq.n	800154c <HAL_CAN_IRQHandler+0x30c>
 800152a:	2b30      	cmp	r3, #48	@ 0x30
 800152c:	d822      	bhi.n	8001574 <HAL_CAN_IRQHandler+0x334>
 800152e:	2b10      	cmp	r3, #16
 8001530:	d002      	beq.n	8001538 <HAL_CAN_IRQHandler+0x2f8>
 8001532:	2b20      	cmp	r3, #32
 8001534:	d005      	beq.n	8001542 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001536:	e01d      	b.n	8001574 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153a:	f043 0308 	orr.w	r3, r3, #8
 800153e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001540:	e019      	b.n	8001576 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001544:	f043 0310 	orr.w	r3, r3, #16
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800154a:	e014      	b.n	8001576 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800154c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154e:	f043 0320 	orr.w	r3, r3, #32
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001554:	e00f      	b.n	8001576 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001558:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800155e:	e00a      	b.n	8001576 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001568:	e005      	b.n	8001576 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800156a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001572:	e000      	b.n	8001576 <HAL_CAN_IRQHandler+0x336>
            break;
 8001574:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	699a      	ldr	r2, [r3, #24]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001584:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2204      	movs	r2, #4
 800158c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800158e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001590:	2b00      	cmp	r3, #0
 8001592:	d008      	beq.n	80015a6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 f872 	bl	800168a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80015a6:	bf00      	nop
 80015a8:	3728      	adds	r7, #40	@ 0x28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b0:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016bc:	4013      	ands	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d2:	4a04      	ldr	r2, [pc, #16]	@ (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	60d3      	str	r3, [r2, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ec:	4b04      	ldr	r3, [pc, #16]	@ (8001700 <__NVIC_GetPriorityGrouping+0x18>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	f003 0307 	and.w	r3, r3, #7
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	2b00      	cmp	r3, #0
 8001714:	db0b      	blt.n	800172e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	f003 021f 	and.w	r2, r3, #31
 800171c:	4907      	ldr	r1, [pc, #28]	@ (800173c <__NVIC_EnableIRQ+0x38>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	095b      	lsrs	r3, r3, #5
 8001724:	2001      	movs	r0, #1
 8001726:	fa00 f202 	lsl.w	r2, r0, r2
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000e100 	.word	0xe000e100

08001740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db0a      	blt.n	800176a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	490c      	ldr	r1, [pc, #48]	@ (800178c <__NVIC_SetPriority+0x4c>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	0112      	lsls	r2, r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	440b      	add	r3, r1
 8001764:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001768:	e00a      	b.n	8001780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4908      	ldr	r1, [pc, #32]	@ (8001790 <__NVIC_SetPriority+0x50>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3b04      	subs	r3, #4
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	440b      	add	r3, r1
 800177e:	761a      	strb	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000e100 	.word	0xe000e100
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	@ 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f1c3 0307 	rsb	r3, r3, #7
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	bf28      	it	cs
 80017b2:	2304      	movcs	r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3304      	adds	r3, #4
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d902      	bls.n	80017c4 <NVIC_EncodePriority+0x30>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3b03      	subs	r3, #3
 80017c2:	e000      	b.n	80017c6 <NVIC_EncodePriority+0x32>
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43d9      	mvns	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	4313      	orrs	r3, r2
         );
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	@ 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ff4c 	bl	80016a0 <__NVIC_SetPriorityGrouping>
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
 800181c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001822:	f7ff ff61 	bl	80016e8 <__NVIC_GetPriorityGrouping>
 8001826:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	68b9      	ldr	r1, [r7, #8]
 800182c:	6978      	ldr	r0, [r7, #20]
 800182e:	f7ff ffb1 	bl	8001794 <NVIC_EncodePriority>
 8001832:	4602      	mov	r2, r0
 8001834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001838:	4611      	mov	r1, r2
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ff80 	bl	8001740 <__NVIC_SetPriority>
}
 8001840:	bf00      	nop
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ff54 	bl	8001704 <__NVIC_EnableIRQ>
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	@ 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	e16b      	b.n	8001b58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001880:	2201      	movs	r2, #1
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	429a      	cmp	r2, r3
 800189a:	f040 815a 	bne.w	8001b52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d005      	beq.n	80018b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d130      	bne.n	8001918 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	2203      	movs	r2, #3
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ec:	2201      	movs	r2, #1
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	f003 0201 	and.w	r2, r3, #1
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	2b03      	cmp	r3, #3
 8001922:	d017      	beq.n	8001954 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d123      	bne.n	80019a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	08da      	lsrs	r2, r3, #3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3208      	adds	r2, #8
 8001968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	220f      	movs	r2, #15
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	08da      	lsrs	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3208      	adds	r2, #8
 80019a2:	69b9      	ldr	r1, [r7, #24]
 80019a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2203      	movs	r2, #3
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0203 	and.w	r2, r3, #3
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80b4 	beq.w	8001b52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b60      	ldr	r3, [pc, #384]	@ (8001b70 <HAL_GPIO_Init+0x30c>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f2:	4a5f      	ldr	r2, [pc, #380]	@ (8001b70 <HAL_GPIO_Init+0x30c>)
 80019f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001b70 <HAL_GPIO_Init+0x30c>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a06:	4a5b      	ldr	r2, [pc, #364]	@ (8001b74 <HAL_GPIO_Init+0x310>)
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	089b      	lsrs	r3, r3, #2
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	220f      	movs	r2, #15
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a52      	ldr	r2, [pc, #328]	@ (8001b78 <HAL_GPIO_Init+0x314>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d02b      	beq.n	8001a8a <HAL_GPIO_Init+0x226>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a51      	ldr	r2, [pc, #324]	@ (8001b7c <HAL_GPIO_Init+0x318>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d025      	beq.n	8001a86 <HAL_GPIO_Init+0x222>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a50      	ldr	r2, [pc, #320]	@ (8001b80 <HAL_GPIO_Init+0x31c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d01f      	beq.n	8001a82 <HAL_GPIO_Init+0x21e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a4f      	ldr	r2, [pc, #316]	@ (8001b84 <HAL_GPIO_Init+0x320>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d019      	beq.n	8001a7e <HAL_GPIO_Init+0x21a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a4e      	ldr	r2, [pc, #312]	@ (8001b88 <HAL_GPIO_Init+0x324>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_Init+0x216>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a4d      	ldr	r2, [pc, #308]	@ (8001b8c <HAL_GPIO_Init+0x328>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d00d      	beq.n	8001a76 <HAL_GPIO_Init+0x212>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4c      	ldr	r2, [pc, #304]	@ (8001b90 <HAL_GPIO_Init+0x32c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d007      	beq.n	8001a72 <HAL_GPIO_Init+0x20e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4b      	ldr	r2, [pc, #300]	@ (8001b94 <HAL_GPIO_Init+0x330>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_GPIO_Init+0x20a>
 8001a6a:	2307      	movs	r3, #7
 8001a6c:	e00e      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a6e:	2308      	movs	r3, #8
 8001a70:	e00c      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a72:	2306      	movs	r3, #6
 8001a74:	e00a      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a76:	2305      	movs	r3, #5
 8001a78:	e008      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	e006      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e004      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e002      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	69fa      	ldr	r2, [r7, #28]
 8001a8e:	f002 0203 	and.w	r2, r2, #3
 8001a92:	0092      	lsls	r2, r2, #2
 8001a94:	4093      	lsls	r3, r2
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a9c:	4935      	ldr	r1, [pc, #212]	@ (8001b74 <HAL_GPIO_Init+0x310>)
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	089b      	lsrs	r3, r3, #2
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8001b98 <HAL_GPIO_Init+0x334>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ace:	4a32      	ldr	r2, [pc, #200]	@ (8001b98 <HAL_GPIO_Init+0x334>)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad4:	4b30      	ldr	r3, [pc, #192]	@ (8001b98 <HAL_GPIO_Init+0x334>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001af8:	4a27      	ldr	r2, [pc, #156]	@ (8001b98 <HAL_GPIO_Init+0x334>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001afe:	4b26      	ldr	r3, [pc, #152]	@ (8001b98 <HAL_GPIO_Init+0x334>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b22:	4a1d      	ldr	r2, [pc, #116]	@ (8001b98 <HAL_GPIO_Init+0x334>)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b28:	4b1b      	ldr	r3, [pc, #108]	@ (8001b98 <HAL_GPIO_Init+0x334>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b4c:	4a12      	ldr	r2, [pc, #72]	@ (8001b98 <HAL_GPIO_Init+0x334>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3301      	adds	r3, #1
 8001b56:	61fb      	str	r3, [r7, #28]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	2b0f      	cmp	r3, #15
 8001b5c:	f67f ae90 	bls.w	8001880 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3724      	adds	r7, #36	@ 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40013800 	.word	0x40013800
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	40020400 	.word	0x40020400
 8001b80:	40020800 	.word	0x40020800
 8001b84:	40020c00 	.word	0x40020c00
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40021400 	.word	0x40021400
 8001b90:	40021800 	.word	0x40021800
 8001b94:	40021c00 	.word	0x40021c00
 8001b98:	40013c00 	.word	0x40013c00

08001b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bac:	787b      	ldrb	r3, [r7, #1]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb2:	887a      	ldrh	r2, [r7, #2]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bb8:	e003      	b.n	8001bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bba:	887b      	ldrh	r3, [r7, #2]
 8001bbc:	041a      	lsls	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	619a      	str	r2, [r3, #24]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b085      	sub	sp, #20
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001be0:	887a      	ldrh	r2, [r7, #2]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4013      	ands	r3, r2
 8001be6:	041a      	lsls	r2, r3, #16
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	43d9      	mvns	r1, r3
 8001bec:	887b      	ldrh	r3, [r7, #2]
 8001bee:	400b      	ands	r3, r1
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	619a      	str	r2, [r3, #24]
}
 8001bf6:	bf00      	nop
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e12b      	b.n	8001e6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d106      	bne.n	8001c30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7fe ff34 	bl	8000a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2224      	movs	r2, #36	@ 0x24
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0201 	bic.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c68:	f001 fc36 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 8001c6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	4a81      	ldr	r2, [pc, #516]	@ (8001e78 <HAL_I2C_Init+0x274>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d807      	bhi.n	8001c88 <HAL_I2C_Init+0x84>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4a80      	ldr	r2, [pc, #512]	@ (8001e7c <HAL_I2C_Init+0x278>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	bf94      	ite	ls
 8001c80:	2301      	movls	r3, #1
 8001c82:	2300      	movhi	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	e006      	b.n	8001c96 <HAL_I2C_Init+0x92>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4a7d      	ldr	r2, [pc, #500]	@ (8001e80 <HAL_I2C_Init+0x27c>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	bf94      	ite	ls
 8001c90:	2301      	movls	r3, #1
 8001c92:	2300      	movhi	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e0e7      	b.n	8001e6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4a78      	ldr	r2, [pc, #480]	@ (8001e84 <HAL_I2C_Init+0x280>)
 8001ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca6:	0c9b      	lsrs	r3, r3, #18
 8001ca8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	4a6a      	ldr	r2, [pc, #424]	@ (8001e78 <HAL_I2C_Init+0x274>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d802      	bhi.n	8001cd8 <HAL_I2C_Init+0xd4>
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	e009      	b.n	8001cec <HAL_I2C_Init+0xe8>
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001cde:	fb02 f303 	mul.w	r3, r2, r3
 8001ce2:	4a69      	ldr	r2, [pc, #420]	@ (8001e88 <HAL_I2C_Init+0x284>)
 8001ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce8:	099b      	lsrs	r3, r3, #6
 8001cea:	3301      	adds	r3, #1
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	430b      	orrs	r3, r1
 8001cf2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001cfe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	495c      	ldr	r1, [pc, #368]	@ (8001e78 <HAL_I2C_Init+0x274>)
 8001d08:	428b      	cmp	r3, r1
 8001d0a:	d819      	bhi.n	8001d40 <HAL_I2C_Init+0x13c>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	1e59      	subs	r1, r3, #1
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d1a:	1c59      	adds	r1, r3, #1
 8001d1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d20:	400b      	ands	r3, r1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00a      	beq.n	8001d3c <HAL_I2C_Init+0x138>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1e59      	subs	r1, r3, #1
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d34:	3301      	adds	r3, #1
 8001d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d3a:	e051      	b.n	8001de0 <HAL_I2C_Init+0x1dc>
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	e04f      	b.n	8001de0 <HAL_I2C_Init+0x1dc>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d111      	bne.n	8001d6c <HAL_I2C_Init+0x168>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	1e58      	subs	r0, r3, #1
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6859      	ldr	r1, [r3, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	440b      	add	r3, r1
 8001d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	bf0c      	ite	eq
 8001d64:	2301      	moveq	r3, #1
 8001d66:	2300      	movne	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	e012      	b.n	8001d92 <HAL_I2C_Init+0x18e>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	1e58      	subs	r0, r3, #1
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6859      	ldr	r1, [r3, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	0099      	lsls	r1, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d82:	3301      	adds	r3, #1
 8001d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	bf0c      	ite	eq
 8001d8c:	2301      	moveq	r3, #1
 8001d8e:	2300      	movne	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_I2C_Init+0x196>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e022      	b.n	8001de0 <HAL_I2C_Init+0x1dc>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10e      	bne.n	8001dc0 <HAL_I2C_Init+0x1bc>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1e58      	subs	r0, r3, #1
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6859      	ldr	r1, [r3, #4]
 8001daa:	460b      	mov	r3, r1
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	440b      	add	r3, r1
 8001db0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001db4:	3301      	adds	r3, #1
 8001db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dbe:	e00f      	b.n	8001de0 <HAL_I2C_Init+0x1dc>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	1e58      	subs	r0, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6859      	ldr	r1, [r3, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	0099      	lsls	r1, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ddc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	6809      	ldr	r1, [r1, #0]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69da      	ldr	r2, [r3, #28]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6911      	ldr	r1, [r2, #16]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68d2      	ldr	r2, [r2, #12]
 8001e1a:	4311      	orrs	r1, r2
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	430b      	orrs	r3, r1
 8001e22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695a      	ldr	r2, [r3, #20]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2220      	movs	r2, #32
 8001e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	000186a0 	.word	0x000186a0
 8001e7c:	001e847f 	.word	0x001e847f
 8001e80:	003d08ff 	.word	0x003d08ff
 8001e84:	431bde83 	.word	0x431bde83
 8001e88:	10624dd3 	.word	0x10624dd3

08001e8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af02      	add	r7, sp, #8
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	461a      	mov	r2, r3
 8001e98:	460b      	mov	r3, r1
 8001e9a:	817b      	strh	r3, [r7, #10]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ea0:	f7fe ff58 	bl	8000d54 <HAL_GetTick>
 8001ea4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b20      	cmp	r3, #32
 8001eb0:	f040 80e0 	bne.w	8002074 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	2319      	movs	r3, #25
 8001eba:	2201      	movs	r2, #1
 8001ebc:	4970      	ldr	r1, [pc, #448]	@ (8002080 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 fc64 	bl	800278c <I2C_WaitOnFlagUntilTimeout>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e0d3      	b.n	8002076 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_I2C_Master_Transmit+0x50>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e0cc      	b.n	8002076 <HAL_I2C_Master_Transmit+0x1ea>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d007      	beq.n	8001f02 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f042 0201 	orr.w	r2, r2, #1
 8001f00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2221      	movs	r2, #33	@ 0x21
 8001f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2210      	movs	r2, #16
 8001f1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	893a      	ldrh	r2, [r7, #8]
 8001f32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4a50      	ldr	r2, [pc, #320]	@ (8002084 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f42:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f44:	8979      	ldrh	r1, [r7, #10]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	6a3a      	ldr	r2, [r7, #32]
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 face 	bl	80024ec <I2C_MasterRequestWrite>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e08d      	b.n	8002076 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f70:	e066      	b.n	8002040 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	6a39      	ldr	r1, [r7, #32]
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 fd22 	bl	80029c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00d      	beq.n	8001f9e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d107      	bne.n	8001f9a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e06b      	b.n	8002076 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa2:	781a      	ldrb	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d11b      	bne.n	8002014 <HAL_I2C_Master_Transmit+0x188>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d017      	beq.n	8002014 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe8:	781a      	ldrb	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	3b01      	subs	r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800200c:	3b01      	subs	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	6a39      	ldr	r1, [r7, #32]
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 fd19 	bl	8002a50 <I2C_WaitOnBTFFlagUntilTimeout>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00d      	beq.n	8002040 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002028:	2b04      	cmp	r3, #4
 800202a:	d107      	bne.n	800203c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800203a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e01a      	b.n	8002076 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002044:	2b00      	cmp	r3, #0
 8002046:	d194      	bne.n	8001f72 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002056:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002070:	2300      	movs	r3, #0
 8002072:	e000      	b.n	8002076 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002074:	2302      	movs	r3, #2
  }
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	00100002 	.word	0x00100002
 8002084:	ffff0000 	.word	0xffff0000

08002088 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08c      	sub	sp, #48	@ 0x30
 800208c:	af02      	add	r7, sp, #8
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	461a      	mov	r2, r3
 8002094:	460b      	mov	r3, r1
 8002096:	817b      	strh	r3, [r7, #10]
 8002098:	4613      	mov	r3, r2
 800209a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800209c:	f7fe fe5a 	bl	8000d54 <HAL_GetTick>
 80020a0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b20      	cmp	r3, #32
 80020ac:	f040 8217 	bne.w	80024de <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	2319      	movs	r3, #25
 80020b6:	2201      	movs	r2, #1
 80020b8:	497c      	ldr	r1, [pc, #496]	@ (80022ac <HAL_I2C_Master_Receive+0x224>)
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 fb66 	bl	800278c <I2C_WaitOnFlagUntilTimeout>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80020c6:	2302      	movs	r3, #2
 80020c8:	e20a      	b.n	80024e0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_I2C_Master_Receive+0x50>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e203      	b.n	80024e0 <HAL_I2C_Master_Receive+0x458>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d007      	beq.n	80020fe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f042 0201 	orr.w	r2, r2, #1
 80020fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800210c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2222      	movs	r2, #34	@ 0x22
 8002112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2210      	movs	r2, #16
 800211a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	893a      	ldrh	r2, [r7, #8]
 800212e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002134:	b29a      	uxth	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4a5c      	ldr	r2, [pc, #368]	@ (80022b0 <HAL_I2C_Master_Receive+0x228>)
 800213e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002140:	8979      	ldrh	r1, [r7, #10]
 8002142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002144:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 fa52 	bl	80025f0 <I2C_MasterRequestRead>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e1c4      	b.n	80024e0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800215a:	2b00      	cmp	r3, #0
 800215c:	d113      	bne.n	8002186 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800215e:	2300      	movs	r3, #0
 8002160:	623b      	str	r3, [r7, #32]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	623b      	str	r3, [r7, #32]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	623b      	str	r3, [r7, #32]
 8002172:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	e198      	b.n	80024b8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800218a:	2b01      	cmp	r3, #1
 800218c:	d11b      	bne.n	80021c6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800219c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	61fb      	str	r3, [r7, #28]
 80021b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e178      	b.n	80024b8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d11b      	bne.n	8002206 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	e158      	b.n	80024b8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002214:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800222c:	e144      	b.n	80024b8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002232:	2b03      	cmp	r3, #3
 8002234:	f200 80f1 	bhi.w	800241a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800223c:	2b01      	cmp	r3, #1
 800223e:	d123      	bne.n	8002288 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002242:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 fc4b 	bl	8002ae0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e145      	b.n	80024e0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691a      	ldr	r2, [r3, #16]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800227c:	b29b      	uxth	r3, r3
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002286:	e117      	b.n	80024b8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800228c:	2b02      	cmp	r3, #2
 800228e:	d14e      	bne.n	800232e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002296:	2200      	movs	r2, #0
 8002298:	4906      	ldr	r1, [pc, #24]	@ (80022b4 <HAL_I2C_Master_Receive+0x22c>)
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 fa76 	bl	800278c <I2C_WaitOnFlagUntilTimeout>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d008      	beq.n	80022b8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e11a      	b.n	80024e0 <HAL_I2C_Master_Receive+0x458>
 80022aa:	bf00      	nop
 80022ac:	00100002 	.word	0x00100002
 80022b0:	ffff0000 	.word	0xffff0000
 80022b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691a      	ldr	r2, [r3, #16]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002322:	b29b      	uxth	r3, r3
 8002324:	3b01      	subs	r3, #1
 8002326:	b29a      	uxth	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800232c:	e0c4      	b.n	80024b8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800232e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002334:	2200      	movs	r2, #0
 8002336:	496c      	ldr	r1, [pc, #432]	@ (80024e8 <HAL_I2C_Master_Receive+0x460>)
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 fa27 	bl	800278c <I2C_WaitOnFlagUntilTimeout>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0cb      	b.n	80024e0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002356:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002374:	3b01      	subs	r3, #1
 8002376:	b29a      	uxth	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002380:	b29b      	uxth	r3, r3
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800238a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002390:	2200      	movs	r2, #0
 8002392:	4955      	ldr	r1, [pc, #340]	@ (80024e8 <HAL_I2C_Master_Receive+0x460>)
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 f9f9 	bl	800278c <I2C_WaitOnFlagUntilTimeout>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e09d      	b.n	80024e0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691a      	ldr	r2, [r3, #16]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	691a      	ldr	r2, [r3, #16]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002402:	3b01      	subs	r3, #1
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240e:	b29b      	uxth	r3, r3
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002418:	e04e      	b.n	80024b8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800241a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800241c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 fb5e 	bl	8002ae0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e058      	b.n	80024e0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002456:	b29b      	uxth	r3, r3
 8002458:	3b01      	subs	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	2b04      	cmp	r3, #4
 800246c:	d124      	bne.n	80024b8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002472:	2b03      	cmp	r3, #3
 8002474:	d107      	bne.n	8002486 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002484:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f47f aeb6 	bne.w	800222e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2220      	movs	r2, #32
 80024c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	e000      	b.n	80024e0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80024de:	2302      	movs	r3, #2
  }
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3728      	adds	r7, #40	@ 0x28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	00010004 	.word	0x00010004

080024ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	460b      	mov	r3, r1
 80024fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002500:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2b08      	cmp	r3, #8
 8002506:	d006      	beq.n	8002516 <I2C_MasterRequestWrite+0x2a>
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d003      	beq.n	8002516 <I2C_MasterRequestWrite+0x2a>
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002514:	d108      	bne.n	8002528 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	e00b      	b.n	8002540 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252c:	2b12      	cmp	r3, #18
 800252e:	d107      	bne.n	8002540 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800253e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 f91d 	bl	800278c <I2C_WaitOnFlagUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00d      	beq.n	8002574 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002562:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002566:	d103      	bne.n	8002570 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800256e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e035      	b.n	80025e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800257c:	d108      	bne.n	8002590 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800257e:	897b      	ldrh	r3, [r7, #10]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	461a      	mov	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800258c:	611a      	str	r2, [r3, #16]
 800258e:	e01b      	b.n	80025c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002590:	897b      	ldrh	r3, [r7, #10]
 8002592:	11db      	asrs	r3, r3, #7
 8002594:	b2db      	uxtb	r3, r3
 8002596:	f003 0306 	and.w	r3, r3, #6
 800259a:	b2db      	uxtb	r3, r3
 800259c:	f063 030f 	orn	r3, r3, #15
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	490e      	ldr	r1, [pc, #56]	@ (80025e8 <I2C_MasterRequestWrite+0xfc>)
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f966 	bl	8002880 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e010      	b.n	80025e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025be:	897b      	ldrh	r3, [r7, #10]
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	4907      	ldr	r1, [pc, #28]	@ (80025ec <I2C_MasterRequestWrite+0x100>)
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f956 	bl	8002880 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	00010008 	.word	0x00010008
 80025ec:	00010002 	.word	0x00010002

080025f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af02      	add	r7, sp, #8
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	460b      	mov	r3, r1
 80025fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002604:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002614:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2b08      	cmp	r3, #8
 800261a:	d006      	beq.n	800262a <I2C_MasterRequestRead+0x3a>
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d003      	beq.n	800262a <I2C_MasterRequestRead+0x3a>
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002628:	d108      	bne.n	800263c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	e00b      	b.n	8002654 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002640:	2b11      	cmp	r3, #17
 8002642:	d107      	bne.n	8002654 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002652:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 f893 	bl	800278c <I2C_WaitOnFlagUntilTimeout>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00d      	beq.n	8002688 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800267a:	d103      	bne.n	8002684 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002682:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e079      	b.n	800277c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002690:	d108      	bne.n	80026a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002692:	897b      	ldrh	r3, [r7, #10]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	b2da      	uxtb	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	611a      	str	r2, [r3, #16]
 80026a2:	e05f      	b.n	8002764 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026a4:	897b      	ldrh	r3, [r7, #10]
 80026a6:	11db      	asrs	r3, r3, #7
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	f003 0306 	and.w	r3, r3, #6
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	f063 030f 	orn	r3, r3, #15
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	4930      	ldr	r1, [pc, #192]	@ (8002784 <I2C_MasterRequestRead+0x194>)
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 f8dc 	bl	8002880 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e054      	b.n	800277c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026d2:	897b      	ldrh	r3, [r7, #10]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	4929      	ldr	r1, [pc, #164]	@ (8002788 <I2C_MasterRequestRead+0x198>)
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 f8cc 	bl	8002880 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e044      	b.n	800277c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002716:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f831 	bl	800278c <I2C_WaitOnFlagUntilTimeout>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00d      	beq.n	800274c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800273e:	d103      	bne.n	8002748 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002746:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e017      	b.n	800277c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800274c:	897b      	ldrh	r3, [r7, #10]
 800274e:	11db      	asrs	r3, r3, #7
 8002750:	b2db      	uxtb	r3, r3
 8002752:	f003 0306 	and.w	r3, r3, #6
 8002756:	b2db      	uxtb	r3, r3
 8002758:	f063 030e 	orn	r3, r3, #14
 800275c:	b2da      	uxtb	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	4907      	ldr	r1, [pc, #28]	@ (8002788 <I2C_MasterRequestRead+0x198>)
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 f888 	bl	8002880 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	00010008 	.word	0x00010008
 8002788:	00010002 	.word	0x00010002

0800278c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	4613      	mov	r3, r2
 800279a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800279c:	e048      	b.n	8002830 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a4:	d044      	beq.n	8002830 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a6:	f7fe fad5 	bl	8000d54 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d302      	bcc.n	80027bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d139      	bne.n	8002830 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	0c1b      	lsrs	r3, r3, #16
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d10d      	bne.n	80027e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	43da      	mvns	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	4013      	ands	r3, r2
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bf0c      	ite	eq
 80027d8:	2301      	moveq	r3, #1
 80027da:	2300      	movne	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	e00c      	b.n	80027fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	43da      	mvns	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	4013      	ands	r3, r2
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	bf0c      	ite	eq
 80027f4:	2301      	moveq	r3, #1
 80027f6:	2300      	movne	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d116      	bne.n	8002830 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281c:	f043 0220 	orr.w	r2, r3, #32
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e023      	b.n	8002878 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	0c1b      	lsrs	r3, r3, #16
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b01      	cmp	r3, #1
 8002838:	d10d      	bne.n	8002856 <I2C_WaitOnFlagUntilTimeout+0xca>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	43da      	mvns	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	4013      	ands	r3, r2
 8002846:	b29b      	uxth	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	bf0c      	ite	eq
 800284c:	2301      	moveq	r3, #1
 800284e:	2300      	movne	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	461a      	mov	r2, r3
 8002854:	e00c      	b.n	8002870 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	43da      	mvns	r2, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	4013      	ands	r3, r2
 8002862:	b29b      	uxth	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	bf0c      	ite	eq
 8002868:	2301      	moveq	r3, #1
 800286a:	2300      	movne	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	461a      	mov	r2, r3
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	429a      	cmp	r2, r3
 8002874:	d093      	beq.n	800279e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800288e:	e071      	b.n	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800289a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800289e:	d123      	bne.n	80028e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d4:	f043 0204 	orr.w	r2, r3, #4
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e067      	b.n	80029b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ee:	d041      	beq.n	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f0:	f7fe fa30 	bl	8000d54 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d302      	bcc.n	8002906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d136      	bne.n	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	0c1b      	lsrs	r3, r3, #16
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b01      	cmp	r3, #1
 800290e:	d10c      	bne.n	800292a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	43da      	mvns	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4013      	ands	r3, r2
 800291c:	b29b      	uxth	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	bf14      	ite	ne
 8002922:	2301      	movne	r3, #1
 8002924:	2300      	moveq	r3, #0
 8002926:	b2db      	uxtb	r3, r3
 8002928:	e00b      	b.n	8002942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	43da      	mvns	r2, r3
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	4013      	ands	r3, r2
 8002936:	b29b      	uxth	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf14      	ite	ne
 800293c:	2301      	movne	r3, #1
 800293e:	2300      	moveq	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d016      	beq.n	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002960:	f043 0220 	orr.w	r2, r3, #32
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e021      	b.n	80029b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	0c1b      	lsrs	r3, r3, #16
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b01      	cmp	r3, #1
 800297c:	d10c      	bne.n	8002998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	43da      	mvns	r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	4013      	ands	r3, r2
 800298a:	b29b      	uxth	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	bf14      	ite	ne
 8002990:	2301      	movne	r3, #1
 8002992:	2300      	moveq	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	e00b      	b.n	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	43da      	mvns	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4013      	ands	r3, r2
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	bf14      	ite	ne
 80029aa:	2301      	movne	r3, #1
 80029ac:	2300      	moveq	r3, #0
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f47f af6d 	bne.w	8002890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029cc:	e034      	b.n	8002a38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f8e3 	bl	8002b9a <I2C_IsAcknowledgeFailed>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e034      	b.n	8002a48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e4:	d028      	beq.n	8002a38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e6:	f7fe f9b5 	bl	8000d54 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d302      	bcc.n	80029fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d11d      	bne.n	8002a38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a06:	2b80      	cmp	r3, #128	@ 0x80
 8002a08:	d016      	beq.n	8002a38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a24:	f043 0220 	orr.w	r2, r3, #32
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e007      	b.n	8002a48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a42:	2b80      	cmp	r3, #128	@ 0x80
 8002a44:	d1c3      	bne.n	80029ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a5c:	e034      	b.n	8002ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 f89b 	bl	8002b9a <I2C_IsAcknowledgeFailed>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e034      	b.n	8002ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a74:	d028      	beq.n	8002ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a76:	f7fe f96d 	bl	8000d54 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d302      	bcc.n	8002a8c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d11d      	bne.n	8002ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d016      	beq.n	8002ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	f043 0220 	orr.w	r2, r3, #32
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e007      	b.n	8002ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d1c3      	bne.n	8002a5e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002aec:	e049      	b.n	8002b82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b10      	cmp	r3, #16
 8002afa:	d119      	bne.n	8002b30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0210 	mvn.w	r2, #16
 8002b04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e030      	b.n	8002b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b30:	f7fe f910 	bl	8000d54 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d302      	bcc.n	8002b46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d11d      	bne.n	8002b82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b50:	2b40      	cmp	r3, #64	@ 0x40
 8002b52:	d016      	beq.n	8002b82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	f043 0220 	orr.w	r2, r3, #32
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e007      	b.n	8002b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b8c:	2b40      	cmp	r3, #64	@ 0x40
 8002b8e:	d1ae      	bne.n	8002aee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bb0:	d11b      	bne.n	8002bea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002bba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd6:	f043 0204 	orr.w	r2, r3, #4
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e267      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d075      	beq.n	8002d02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c16:	4b88      	ldr	r3, [pc, #544]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d00c      	beq.n	8002c3c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c22:	4b85      	ldr	r3, [pc, #532]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d112      	bne.n	8002c54 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c2e:	4b82      	ldr	r3, [pc, #520]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c3a:	d10b      	bne.n	8002c54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c3c:	4b7e      	ldr	r3, [pc, #504]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d05b      	beq.n	8002d00 <HAL_RCC_OscConfig+0x108>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d157      	bne.n	8002d00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e242      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c5c:	d106      	bne.n	8002c6c <HAL_RCC_OscConfig+0x74>
 8002c5e:	4b76      	ldr	r3, [pc, #472]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a75      	ldr	r2, [pc, #468]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	e01d      	b.n	8002ca8 <HAL_RCC_OscConfig+0xb0>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCC_OscConfig+0x98>
 8002c76:	4b70      	ldr	r3, [pc, #448]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a6f      	ldr	r2, [pc, #444]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	4b6d      	ldr	r3, [pc, #436]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a6c      	ldr	r2, [pc, #432]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	e00b      	b.n	8002ca8 <HAL_RCC_OscConfig+0xb0>
 8002c90:	4b69      	ldr	r3, [pc, #420]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a68      	ldr	r2, [pc, #416]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	4b66      	ldr	r3, [pc, #408]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a65      	ldr	r2, [pc, #404]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002ca2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d013      	beq.n	8002cd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7fe f850 	bl	8000d54 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7fe f84c 	bl	8000d54 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	@ 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e207      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cca:	4b5b      	ldr	r3, [pc, #364]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0xc0>
 8002cd6:	e014      	b.n	8002d02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd8:	f7fe f83c 	bl	8000d54 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce0:	f7fe f838 	bl	8000d54 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b64      	cmp	r3, #100	@ 0x64
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e1f3      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf2:	4b51      	ldr	r3, [pc, #324]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0xe8>
 8002cfe:	e000      	b.n	8002d02 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d063      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00b      	beq.n	8002d32 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d1a:	4b47      	ldr	r3, [pc, #284]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d11c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d26:	4b44      	ldr	r3, [pc, #272]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d116      	bne.n	8002d60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d32:	4b41      	ldr	r3, [pc, #260]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d005      	beq.n	8002d4a <HAL_RCC_OscConfig+0x152>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d001      	beq.n	8002d4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e1c7      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4937      	ldr	r1, [pc, #220]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5e:	e03a      	b.n	8002dd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d020      	beq.n	8002daa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d68:	4b34      	ldr	r3, [pc, #208]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6e:	f7fd fff1 	bl	8000d54 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d76:	f7fd ffed 	bl	8000d54 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e1a8      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d88:	4b2b      	ldr	r3, [pc, #172]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d94:	4b28      	ldr	r3, [pc, #160]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4925      	ldr	r1, [pc, #148]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	600b      	str	r3, [r1, #0]
 8002da8:	e015      	b.n	8002dd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002daa:	4b24      	ldr	r3, [pc, #144]	@ (8002e3c <HAL_RCC_OscConfig+0x244>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db0:	f7fd ffd0 	bl	8000d54 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db8:	f7fd ffcc 	bl	8000d54 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e187      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dca:	4b1b      	ldr	r3, [pc, #108]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d036      	beq.n	8002e50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d016      	beq.n	8002e18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dea:	4b15      	ldr	r3, [pc, #84]	@ (8002e40 <HAL_RCC_OscConfig+0x248>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df0:	f7fd ffb0 	bl	8000d54 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df8:	f7fd ffac 	bl	8000d54 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e167      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e38 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0x200>
 8002e16:	e01b      	b.n	8002e50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e18:	4b09      	ldr	r3, [pc, #36]	@ (8002e40 <HAL_RCC_OscConfig+0x248>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1e:	f7fd ff99 	bl	8000d54 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e24:	e00e      	b.n	8002e44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e26:	f7fd ff95 	bl	8000d54 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d907      	bls.n	8002e44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e150      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	42470000 	.word	0x42470000
 8002e40:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e44:	4b88      	ldr	r3, [pc, #544]	@ (8003068 <HAL_RCC_OscConfig+0x470>)
 8002e46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1ea      	bne.n	8002e26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 8097 	beq.w	8002f8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e62:	4b81      	ldr	r3, [pc, #516]	@ (8003068 <HAL_RCC_OscConfig+0x470>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10f      	bne.n	8002e8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	4b7d      	ldr	r3, [pc, #500]	@ (8003068 <HAL_RCC_OscConfig+0x470>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e76:	4a7c      	ldr	r2, [pc, #496]	@ (8003068 <HAL_RCC_OscConfig+0x470>)
 8002e78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e7e:	4b7a      	ldr	r3, [pc, #488]	@ (8003068 <HAL_RCC_OscConfig+0x470>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8e:	4b77      	ldr	r3, [pc, #476]	@ (800306c <HAL_RCC_OscConfig+0x474>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d118      	bne.n	8002ecc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e9a:	4b74      	ldr	r3, [pc, #464]	@ (800306c <HAL_RCC_OscConfig+0x474>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a73      	ldr	r2, [pc, #460]	@ (800306c <HAL_RCC_OscConfig+0x474>)
 8002ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea6:	f7fd ff55 	bl	8000d54 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eae:	f7fd ff51 	bl	8000d54 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e10c      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec0:	4b6a      	ldr	r3, [pc, #424]	@ (800306c <HAL_RCC_OscConfig+0x474>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d106      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x2ea>
 8002ed4:	4b64      	ldr	r3, [pc, #400]	@ (8003068 <HAL_RCC_OscConfig+0x470>)
 8002ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed8:	4a63      	ldr	r2, [pc, #396]	@ (8003068 <HAL_RCC_OscConfig+0x470>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ee0:	e01c      	b.n	8002f1c <HAL_RCC_OscConfig+0x324>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b05      	cmp	r3, #5
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCC_OscConfig+0x30c>
 8002eea:	4b5f      	ldr	r3, [pc, #380]	@ (8003068 <HAL_RCC_OscConfig+0x470>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eee:	4a5e      	ldr	r2, [pc, #376]	@ (8003068 <HAL_RCC_OscConfig+0x470>)
 8002ef0:	f043 0304 	orr.w	r3, r3, #4
 8002ef4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ef6:	4b5c      	ldr	r3, [pc, #368]	@ (8003068 <HAL_RCC_OscConfig+0x470>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efa:	4a5b      	ldr	r2, [pc, #364]	@ (8003068 <HAL_RCC_OscConfig+0x470>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f02:	e00b      	b.n	8002f1c <HAL_RCC_OscConfig+0x324>
 8002f04:	4b58      	ldr	r3, [pc, #352]	@ (8003068 <HAL_RCC_OscConfig+0x470>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f08:	4a57      	ldr	r2, [pc, #348]	@ (8003068 <HAL_RCC_OscConfig+0x470>)
 8002f0a:	f023 0301 	bic.w	r3, r3, #1
 8002f0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f10:	4b55      	ldr	r3, [pc, #340]	@ (8003068 <HAL_RCC_OscConfig+0x470>)
 8002f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f14:	4a54      	ldr	r2, [pc, #336]	@ (8003068 <HAL_RCC_OscConfig+0x470>)
 8002f16:	f023 0304 	bic.w	r3, r3, #4
 8002f1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d015      	beq.n	8002f50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f24:	f7fd ff16 	bl	8000d54 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2a:	e00a      	b.n	8002f42 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2c:	f7fd ff12 	bl	8000d54 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e0cb      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f42:	4b49      	ldr	r3, [pc, #292]	@ (8003068 <HAL_RCC_OscConfig+0x470>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0ee      	beq.n	8002f2c <HAL_RCC_OscConfig+0x334>
 8002f4e:	e014      	b.n	8002f7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f50:	f7fd ff00 	bl	8000d54 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f56:	e00a      	b.n	8002f6e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f58:	f7fd fefc 	bl	8000d54 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e0b5      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f6e:	4b3e      	ldr	r3, [pc, #248]	@ (8003068 <HAL_RCC_OscConfig+0x470>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1ee      	bne.n	8002f58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f7a:	7dfb      	ldrb	r3, [r7, #23]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d105      	bne.n	8002f8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f80:	4b39      	ldr	r3, [pc, #228]	@ (8003068 <HAL_RCC_OscConfig+0x470>)
 8002f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f84:	4a38      	ldr	r2, [pc, #224]	@ (8003068 <HAL_RCC_OscConfig+0x470>)
 8002f86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f8a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80a1 	beq.w	80030d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f96:	4b34      	ldr	r3, [pc, #208]	@ (8003068 <HAL_RCC_OscConfig+0x470>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d05c      	beq.n	800305c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d141      	bne.n	800302e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002faa:	4b31      	ldr	r3, [pc, #196]	@ (8003070 <HAL_RCC_OscConfig+0x478>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7fd fed0 	bl	8000d54 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb8:	f7fd fecc 	bl	8000d54 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e087      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fca:	4b27      	ldr	r3, [pc, #156]	@ (8003068 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69da      	ldr	r2, [r3, #28]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe4:	019b      	lsls	r3, r3, #6
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fec:	085b      	lsrs	r3, r3, #1
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	041b      	lsls	r3, r3, #16
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff8:	061b      	lsls	r3, r3, #24
 8002ffa:	491b      	ldr	r1, [pc, #108]	@ (8003068 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003000:	4b1b      	ldr	r3, [pc, #108]	@ (8003070 <HAL_RCC_OscConfig+0x478>)
 8003002:	2201      	movs	r2, #1
 8003004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003006:	f7fd fea5 	bl	8000d54 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300e:	f7fd fea1 	bl	8000d54 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e05c      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003020:	4b11      	ldr	r3, [pc, #68]	@ (8003068 <HAL_RCC_OscConfig+0x470>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0f0      	beq.n	800300e <HAL_RCC_OscConfig+0x416>
 800302c:	e054      	b.n	80030d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800302e:	4b10      	ldr	r3, [pc, #64]	@ (8003070 <HAL_RCC_OscConfig+0x478>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003034:	f7fd fe8e 	bl	8000d54 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303c:	f7fd fe8a 	bl	8000d54 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e045      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800304e:	4b06      	ldr	r3, [pc, #24]	@ (8003068 <HAL_RCC_OscConfig+0x470>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0x444>
 800305a:	e03d      	b.n	80030d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d107      	bne.n	8003074 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e038      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
 8003068:	40023800 	.word	0x40023800
 800306c:	40007000 	.word	0x40007000
 8003070:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003074:	4b1b      	ldr	r3, [pc, #108]	@ (80030e4 <HAL_RCC_OscConfig+0x4ec>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d028      	beq.n	80030d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800308c:	429a      	cmp	r2, r3
 800308e:	d121      	bne.n	80030d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309a:	429a      	cmp	r2, r3
 800309c:	d11a      	bne.n	80030d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030a4:	4013      	ands	r3, r2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d111      	bne.n	80030d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ba:	085b      	lsrs	r3, r3, #1
 80030bc:	3b01      	subs	r3, #1
 80030be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d107      	bne.n	80030d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800

080030e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0cc      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030fc:	4b68      	ldr	r3, [pc, #416]	@ (80032a0 <HAL_RCC_ClockConfig+0x1b8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d90c      	bls.n	8003124 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310a:	4b65      	ldr	r3, [pc, #404]	@ (80032a0 <HAL_RCC_ClockConfig+0x1b8>)
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003112:	4b63      	ldr	r3, [pc, #396]	@ (80032a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d001      	beq.n	8003124 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0b8      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d020      	beq.n	8003172 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800313c:	4b59      	ldr	r3, [pc, #356]	@ (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	4a58      	ldr	r2, [pc, #352]	@ (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003146:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0308 	and.w	r3, r3, #8
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003154:	4b53      	ldr	r3, [pc, #332]	@ (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	4a52      	ldr	r2, [pc, #328]	@ (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800315e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003160:	4b50      	ldr	r3, [pc, #320]	@ (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	494d      	ldr	r1, [pc, #308]	@ (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	4313      	orrs	r3, r2
 8003170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d044      	beq.n	8003208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d107      	bne.n	8003196 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003186:	4b47      	ldr	r3, [pc, #284]	@ (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d119      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e07f      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d003      	beq.n	80031a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d107      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a6:	4b3f      	ldr	r3, [pc, #252]	@ (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d109      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e06f      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b6:	4b3b      	ldr	r3, [pc, #236]	@ (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e067      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031c6:	4b37      	ldr	r3, [pc, #220]	@ (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f023 0203 	bic.w	r2, r3, #3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4934      	ldr	r1, [pc, #208]	@ (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d8:	f7fd fdbc 	bl	8000d54 <HAL_GetTick>
 80031dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e0:	f7fd fdb8 	bl	8000d54 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e04f      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f6:	4b2b      	ldr	r3, [pc, #172]	@ (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 020c 	and.w	r2, r3, #12
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	429a      	cmp	r2, r3
 8003206:	d1eb      	bne.n	80031e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003208:	4b25      	ldr	r3, [pc, #148]	@ (80032a0 <HAL_RCC_ClockConfig+0x1b8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d20c      	bcs.n	8003230 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003216:	4b22      	ldr	r3, [pc, #136]	@ (80032a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b20      	ldr	r3, [pc, #128]	@ (80032a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e032      	b.n	8003296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800323c:	4b19      	ldr	r3, [pc, #100]	@ (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4916      	ldr	r1, [pc, #88]	@ (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	4313      	orrs	r3, r2
 800324c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d009      	beq.n	800326e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800325a:	4b12      	ldr	r3, [pc, #72]	@ (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	490e      	ldr	r1, [pc, #56]	@ (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	4313      	orrs	r3, r2
 800326c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800326e:	f000 f821 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8003272:	4602      	mov	r2, r0
 8003274:	4b0b      	ldr	r3, [pc, #44]	@ (80032a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	490a      	ldr	r1, [pc, #40]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003280:	5ccb      	ldrb	r3, [r1, r3]
 8003282:	fa22 f303 	lsr.w	r3, r2, r3
 8003286:	4a09      	ldr	r2, [pc, #36]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800328a:	4b09      	ldr	r3, [pc, #36]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7fd fc4a 	bl	8000b28 <HAL_InitTick>

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40023c00 	.word	0x40023c00
 80032a4:	40023800 	.word	0x40023800
 80032a8:	080063c4 	.word	0x080063c4
 80032ac:	20000000 	.word	0x20000000
 80032b0:	20000004 	.word	0x20000004

080032b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032b8:	b094      	sub	sp, #80	@ 0x50
 80032ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032cc:	4b79      	ldr	r3, [pc, #484]	@ (80034b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 030c 	and.w	r3, r3, #12
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d00d      	beq.n	80032f4 <HAL_RCC_GetSysClockFreq+0x40>
 80032d8:	2b08      	cmp	r3, #8
 80032da:	f200 80e1 	bhi.w	80034a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x34>
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d003      	beq.n	80032ee <HAL_RCC_GetSysClockFreq+0x3a>
 80032e6:	e0db      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032e8:	4b73      	ldr	r3, [pc, #460]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80032ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032ec:	e0db      	b.n	80034a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032ee:	4b73      	ldr	r3, [pc, #460]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x208>)
 80032f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032f2:	e0d8      	b.n	80034a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032f4:	4b6f      	ldr	r3, [pc, #444]	@ (80034b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032fe:	4b6d      	ldr	r3, [pc, #436]	@ (80034b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d063      	beq.n	80033d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800330a:	4b6a      	ldr	r3, [pc, #424]	@ (80034b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	099b      	lsrs	r3, r3, #6
 8003310:	2200      	movs	r2, #0
 8003312:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003314:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800331c:	633b      	str	r3, [r7, #48]	@ 0x30
 800331e:	2300      	movs	r3, #0
 8003320:	637b      	str	r3, [r7, #52]	@ 0x34
 8003322:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003326:	4622      	mov	r2, r4
 8003328:	462b      	mov	r3, r5
 800332a:	f04f 0000 	mov.w	r0, #0
 800332e:	f04f 0100 	mov.w	r1, #0
 8003332:	0159      	lsls	r1, r3, #5
 8003334:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003338:	0150      	lsls	r0, r2, #5
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4621      	mov	r1, r4
 8003340:	1a51      	subs	r1, r2, r1
 8003342:	6139      	str	r1, [r7, #16]
 8003344:	4629      	mov	r1, r5
 8003346:	eb63 0301 	sbc.w	r3, r3, r1
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	f04f 0300 	mov.w	r3, #0
 8003354:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003358:	4659      	mov	r1, fp
 800335a:	018b      	lsls	r3, r1, #6
 800335c:	4651      	mov	r1, sl
 800335e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003362:	4651      	mov	r1, sl
 8003364:	018a      	lsls	r2, r1, #6
 8003366:	4651      	mov	r1, sl
 8003368:	ebb2 0801 	subs.w	r8, r2, r1
 800336c:	4659      	mov	r1, fp
 800336e:	eb63 0901 	sbc.w	r9, r3, r1
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800337e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003382:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003386:	4690      	mov	r8, r2
 8003388:	4699      	mov	r9, r3
 800338a:	4623      	mov	r3, r4
 800338c:	eb18 0303 	adds.w	r3, r8, r3
 8003390:	60bb      	str	r3, [r7, #8]
 8003392:	462b      	mov	r3, r5
 8003394:	eb49 0303 	adc.w	r3, r9, r3
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033a6:	4629      	mov	r1, r5
 80033a8:	024b      	lsls	r3, r1, #9
 80033aa:	4621      	mov	r1, r4
 80033ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033b0:	4621      	mov	r1, r4
 80033b2:	024a      	lsls	r2, r1, #9
 80033b4:	4610      	mov	r0, r2
 80033b6:	4619      	mov	r1, r3
 80033b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033ba:	2200      	movs	r2, #0
 80033bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033c4:	f7fc ff4e 	bl	8000264 <__aeabi_uldivmod>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4613      	mov	r3, r2
 80033ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033d0:	e058      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d2:	4b38      	ldr	r3, [pc, #224]	@ (80034b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	099b      	lsrs	r3, r3, #6
 80033d8:	2200      	movs	r2, #0
 80033da:	4618      	mov	r0, r3
 80033dc:	4611      	mov	r1, r2
 80033de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033e2:	623b      	str	r3, [r7, #32]
 80033e4:	2300      	movs	r3, #0
 80033e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80033e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033ec:	4642      	mov	r2, r8
 80033ee:	464b      	mov	r3, r9
 80033f0:	f04f 0000 	mov.w	r0, #0
 80033f4:	f04f 0100 	mov.w	r1, #0
 80033f8:	0159      	lsls	r1, r3, #5
 80033fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033fe:	0150      	lsls	r0, r2, #5
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4641      	mov	r1, r8
 8003406:	ebb2 0a01 	subs.w	sl, r2, r1
 800340a:	4649      	mov	r1, r9
 800340c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800341c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003420:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003424:	ebb2 040a 	subs.w	r4, r2, sl
 8003428:	eb63 050b 	sbc.w	r5, r3, fp
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	00eb      	lsls	r3, r5, #3
 8003436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800343a:	00e2      	lsls	r2, r4, #3
 800343c:	4614      	mov	r4, r2
 800343e:	461d      	mov	r5, r3
 8003440:	4643      	mov	r3, r8
 8003442:	18e3      	adds	r3, r4, r3
 8003444:	603b      	str	r3, [r7, #0]
 8003446:	464b      	mov	r3, r9
 8003448:	eb45 0303 	adc.w	r3, r5, r3
 800344c:	607b      	str	r3, [r7, #4]
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	e9d7 4500 	ldrd	r4, r5, [r7]
 800345a:	4629      	mov	r1, r5
 800345c:	028b      	lsls	r3, r1, #10
 800345e:	4621      	mov	r1, r4
 8003460:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003464:	4621      	mov	r1, r4
 8003466:	028a      	lsls	r2, r1, #10
 8003468:	4610      	mov	r0, r2
 800346a:	4619      	mov	r1, r3
 800346c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800346e:	2200      	movs	r2, #0
 8003470:	61bb      	str	r3, [r7, #24]
 8003472:	61fa      	str	r2, [r7, #28]
 8003474:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003478:	f7fc fef4 	bl	8000264 <__aeabi_uldivmod>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4613      	mov	r3, r2
 8003482:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003484:	4b0b      	ldr	r3, [pc, #44]	@ (80034b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	0c1b      	lsrs	r3, r3, #16
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	3301      	adds	r3, #1
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003494:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003498:	fbb2 f3f3 	udiv	r3, r2, r3
 800349c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800349e:	e002      	b.n	80034a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034a0:	4b05      	ldr	r3, [pc, #20]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80034a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3750      	adds	r7, #80	@ 0x50
 80034ac:	46bd      	mov	sp, r7
 80034ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034b2:	bf00      	nop
 80034b4:	40023800 	.word	0x40023800
 80034b8:	00f42400 	.word	0x00f42400
 80034bc:	007a1200 	.word	0x007a1200

080034c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c4:	4b03      	ldr	r3, [pc, #12]	@ (80034d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034c6:	681b      	ldr	r3, [r3, #0]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20000000 	.word	0x20000000

080034d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034dc:	f7ff fff0 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 80034e0:	4602      	mov	r2, r0
 80034e2:	4b05      	ldr	r3, [pc, #20]	@ (80034f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	0a9b      	lsrs	r3, r3, #10
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	4903      	ldr	r1, [pc, #12]	@ (80034fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ee:	5ccb      	ldrb	r3, [r1, r3]
 80034f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40023800 	.word	0x40023800
 80034fc:	080063d4 	.word	0x080063d4

08003500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003504:	f7ff ffdc 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 8003508:	4602      	mov	r2, r0
 800350a:	4b05      	ldr	r3, [pc, #20]	@ (8003520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	0b5b      	lsrs	r3, r3, #13
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	4903      	ldr	r1, [pc, #12]	@ (8003524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003516:	5ccb      	ldrb	r3, [r1, r3]
 8003518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800351c:	4618      	mov	r0, r3
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40023800 	.word	0x40023800
 8003524:	080063d4 	.word	0x080063d4

08003528 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	220f      	movs	r2, #15
 8003536:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003538:	4b12      	ldr	r3, [pc, #72]	@ (8003584 <HAL_RCC_GetClockConfig+0x5c>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 0203 	and.w	r2, r3, #3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003544:	4b0f      	ldr	r3, [pc, #60]	@ (8003584 <HAL_RCC_GetClockConfig+0x5c>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003550:	4b0c      	ldr	r3, [pc, #48]	@ (8003584 <HAL_RCC_GetClockConfig+0x5c>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800355c:	4b09      	ldr	r3, [pc, #36]	@ (8003584 <HAL_RCC_GetClockConfig+0x5c>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	08db      	lsrs	r3, r3, #3
 8003562:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800356a:	4b07      	ldr	r3, [pc, #28]	@ (8003588 <HAL_RCC_GetClockConfig+0x60>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0207 	and.w	r2, r3, #7
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	601a      	str	r2, [r3, #0]
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40023800 	.word	0x40023800
 8003588:	40023c00 	.word	0x40023c00

0800358c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e041      	b.n	8003622 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f839 	bl	800362a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f000 f9c0 	bl	8003950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b01      	cmp	r3, #1
 8003652:	d001      	beq.n	8003658 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e04e      	b.n	80036f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a23      	ldr	r2, [pc, #140]	@ (8003704 <HAL_TIM_Base_Start_IT+0xc4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d022      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003682:	d01d      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a1f      	ldr	r2, [pc, #124]	@ (8003708 <HAL_TIM_Base_Start_IT+0xc8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d018      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1e      	ldr	r2, [pc, #120]	@ (800370c <HAL_TIM_Base_Start_IT+0xcc>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d013      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a1c      	ldr	r2, [pc, #112]	@ (8003710 <HAL_TIM_Base_Start_IT+0xd0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00e      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1b      	ldr	r2, [pc, #108]	@ (8003714 <HAL_TIM_Base_Start_IT+0xd4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d009      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a19      	ldr	r2, [pc, #100]	@ (8003718 <HAL_TIM_Base_Start_IT+0xd8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d004      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a18      	ldr	r2, [pc, #96]	@ (800371c <HAL_TIM_Base_Start_IT+0xdc>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d111      	bne.n	80036e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b06      	cmp	r3, #6
 80036d0:	d010      	beq.n	80036f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0201 	orr.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e2:	e007      	b.n	80036f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40010000 	.word	0x40010000
 8003708:	40000400 	.word	0x40000400
 800370c:	40000800 	.word	0x40000800
 8003710:	40000c00 	.word	0x40000c00
 8003714:	40010400 	.word	0x40010400
 8003718:	40014000 	.word	0x40014000
 800371c:	40001800 	.word	0x40001800

08003720 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d020      	beq.n	8003784 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d01b      	beq.n	8003784 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0202 	mvn.w	r2, #2
 8003754:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f8d2 	bl	8003914 <HAL_TIM_IC_CaptureCallback>
 8003770:	e005      	b.n	800377e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f8c4 	bl	8003900 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f8d5 	bl	8003928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b00      	cmp	r3, #0
 800378c:	d020      	beq.n	80037d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d01b      	beq.n	80037d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0204 	mvn.w	r2, #4
 80037a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2202      	movs	r2, #2
 80037a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f8ac 	bl	8003914 <HAL_TIM_IC_CaptureCallback>
 80037bc:	e005      	b.n	80037ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f89e 	bl	8003900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f8af 	bl	8003928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d020      	beq.n	800381c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01b      	beq.n	800381c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0208 	mvn.w	r2, #8
 80037ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2204      	movs	r2, #4
 80037f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f886 	bl	8003914 <HAL_TIM_IC_CaptureCallback>
 8003808:	e005      	b.n	8003816 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f878 	bl	8003900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f889 	bl	8003928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	2b00      	cmp	r3, #0
 8003824:	d020      	beq.n	8003868 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b00      	cmp	r3, #0
 800382e:	d01b      	beq.n	8003868 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0210 	mvn.w	r2, #16
 8003838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2208      	movs	r2, #8
 800383e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f860 	bl	8003914 <HAL_TIM_IC_CaptureCallback>
 8003854:	e005      	b.n	8003862 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f852 	bl	8003900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f863 	bl	8003928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00c      	beq.n	800388c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d007      	beq.n	800388c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0201 	mvn.w	r2, #1
 8003884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fd f86e 	bl	8000968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00c      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800389c:	2b00      	cmp	r3, #0
 800389e:	d007      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f906 	bl	8003abc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00c      	beq.n	80038d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d007      	beq.n	80038d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f834 	bl	800393c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00c      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 0220 	mvn.w	r2, #32
 80038f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f8d8 	bl	8003aa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a46      	ldr	r2, [pc, #280]	@ (8003a7c <TIM_Base_SetConfig+0x12c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d013      	beq.n	8003990 <TIM_Base_SetConfig+0x40>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800396e:	d00f      	beq.n	8003990 <TIM_Base_SetConfig+0x40>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a43      	ldr	r2, [pc, #268]	@ (8003a80 <TIM_Base_SetConfig+0x130>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d00b      	beq.n	8003990 <TIM_Base_SetConfig+0x40>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a42      	ldr	r2, [pc, #264]	@ (8003a84 <TIM_Base_SetConfig+0x134>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d007      	beq.n	8003990 <TIM_Base_SetConfig+0x40>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a41      	ldr	r2, [pc, #260]	@ (8003a88 <TIM_Base_SetConfig+0x138>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d003      	beq.n	8003990 <TIM_Base_SetConfig+0x40>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a40      	ldr	r2, [pc, #256]	@ (8003a8c <TIM_Base_SetConfig+0x13c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d108      	bne.n	80039a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a35      	ldr	r2, [pc, #212]	@ (8003a7c <TIM_Base_SetConfig+0x12c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d02b      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039b0:	d027      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a32      	ldr	r2, [pc, #200]	@ (8003a80 <TIM_Base_SetConfig+0x130>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d023      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a31      	ldr	r2, [pc, #196]	@ (8003a84 <TIM_Base_SetConfig+0x134>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d01f      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a30      	ldr	r2, [pc, #192]	@ (8003a88 <TIM_Base_SetConfig+0x138>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d01b      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a2f      	ldr	r2, [pc, #188]	@ (8003a8c <TIM_Base_SetConfig+0x13c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d017      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a2e      	ldr	r2, [pc, #184]	@ (8003a90 <TIM_Base_SetConfig+0x140>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d013      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003a94 <TIM_Base_SetConfig+0x144>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d00f      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003a98 <TIM_Base_SetConfig+0x148>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00b      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a2b      	ldr	r2, [pc, #172]	@ (8003a9c <TIM_Base_SetConfig+0x14c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d007      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a2a      	ldr	r2, [pc, #168]	@ (8003aa0 <TIM_Base_SetConfig+0x150>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d003      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a29      	ldr	r2, [pc, #164]	@ (8003aa4 <TIM_Base_SetConfig+0x154>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d108      	bne.n	8003a14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a10      	ldr	r2, [pc, #64]	@ (8003a7c <TIM_Base_SetConfig+0x12c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d003      	beq.n	8003a48 <TIM_Base_SetConfig+0xf8>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a12      	ldr	r2, [pc, #72]	@ (8003a8c <TIM_Base_SetConfig+0x13c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d103      	bne.n	8003a50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d105      	bne.n	8003a6e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f023 0201 	bic.w	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	611a      	str	r2, [r3, #16]
  }
}
 8003a6e:	bf00      	nop
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40010000 	.word	0x40010000
 8003a80:	40000400 	.word	0x40000400
 8003a84:	40000800 	.word	0x40000800
 8003a88:	40000c00 	.word	0x40000c00
 8003a8c:	40010400 	.word	0x40010400
 8003a90:	40014000 	.word	0x40014000
 8003a94:	40014400 	.word	0x40014400
 8003a98:	40014800 	.word	0x40014800
 8003a9c:	40001800 	.word	0x40001800
 8003aa0:	40001c00 	.word	0x40001c00
 8003aa4:	40002000 	.word	0x40002000

08003aa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f103 0208 	add.w	r2, r3, #8
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f103 0208 	add.w	r2, r3, #8
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f103 0208 	add.w	r2, r3, #8
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b085      	sub	sp, #20
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b40:	d103      	bne.n	8003b4a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	e00c      	b.n	8003b64 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3308      	adds	r3, #8
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	e002      	b.n	8003b58 <vListInsert+0x2e>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d2f6      	bcs.n	8003b52 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	1c5a      	adds	r2, r3, #1
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	601a      	str	r2, [r3, #0]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6892      	ldr	r2, [r2, #8]
 8003bb2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6852      	ldr	r2, [r2, #4]
 8003bbc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d103      	bne.n	8003bd0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	1e5a      	subs	r2, r3, #1
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08c      	sub	sp, #48	@ 0x30
 8003bf4:	af04      	add	r7, sp, #16
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c00:	88fb      	ldrh	r3, [r7, #6]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 fff9 	bl	8004bfc <pvPortMalloc>
 8003c0a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d013      	beq.n	8003c3a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c12:	2058      	movs	r0, #88	@ 0x58
 8003c14:	f000 fff2 	bl	8004bfc <pvPortMalloc>
 8003c18:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d008      	beq.n	8003c32 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003c20:	2258      	movs	r2, #88	@ 0x58
 8003c22:	2100      	movs	r1, #0
 8003c24:	69f8      	ldr	r0, [r7, #28]
 8003c26:	f002 fb39 	bl	800629c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c30:	e005      	b.n	8003c3e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003c32:	6978      	ldr	r0, [r7, #20]
 8003c34:	f001 f89e 	bl	8004d74 <vPortFree>
 8003c38:	e001      	b.n	8003c3e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d013      	beq.n	8003c6c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c44:	88fa      	ldrh	r2, [r7, #6]
 8003c46:	2300      	movs	r3, #0
 8003c48:	9303      	str	r3, [sp, #12]
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	9302      	str	r3, [sp, #8]
 8003c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68b9      	ldr	r1, [r7, #8]
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f80e 	bl	8003c7c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003c60:	69f8      	ldr	r0, [r7, #28]
 8003c62:	f000 f89b 	bl	8003d9c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003c66:	2301      	movs	r3, #1
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	e002      	b.n	8003c72 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c70:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003c72:	69bb      	ldr	r3, [r7, #24]
    }
 8003c74:	4618      	mov	r0, r3
 8003c76:	3720      	adds	r7, #32
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	461a      	mov	r2, r3
 8003c94:	21a5      	movs	r1, #165	@ 0xa5
 8003c96:	f002 fb01 	bl	800629c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	f023 0307 	bic.w	r3, r3, #7
 8003cb2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00b      	beq.n	8003cd6 <prvInitialiseNewTask+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc2:	f383 8811 	msr	BASEPRI, r3
 8003cc6:	f3bf 8f6f 	isb	sy
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003cd0:	bf00      	nop
 8003cd2:	bf00      	nop
 8003cd4:	e7fd      	b.n	8003cd2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d01e      	beq.n	8003d1a <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cdc:	2300      	movs	r3, #0
 8003cde:	61fb      	str	r3, [r7, #28]
 8003ce0:	e012      	b.n	8003d08 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	7819      	ldrb	r1, [r3, #0]
 8003cea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	4413      	add	r3, r2
 8003cf0:	3334      	adds	r3, #52	@ 0x34
 8003cf2:	460a      	mov	r2, r1
 8003cf4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d006      	beq.n	8003d10 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	3301      	adds	r3, #1
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	2b09      	cmp	r3, #9
 8003d0c:	d9e9      	bls.n	8003ce2 <prvInitialiseNewTask+0x66>
 8003d0e:	e000      	b.n	8003d12 <prvInitialiseNewTask+0x96>
            {
                break;
 8003d10:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d90b      	bls.n	8003d38 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	613b      	str	r3, [r7, #16]
    }
 8003d32:	bf00      	nop
 8003d34:	bf00      	nop
 8003d36:	e7fd      	b.n	8003d34 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d901      	bls.n	8003d42 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d3e:	2304      	movs	r3, #4
 8003d40:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d46:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d4c:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d50:	3304      	adds	r3, #4
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff fedc 	bl	8003b10 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d5a:	3318      	adds	r3, #24
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff fed7 	bl	8003b10 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d66:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6a:	f1c3 0205 	rsb	r2, r3, #5
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d70:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d76:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	68f9      	ldr	r1, [r7, #12]
 8003d7c:	69b8      	ldr	r0, [r7, #24]
 8003d7e:	f000 fd25 	bl	80047cc <pxPortInitialiseStack>
 8003d82:	4602      	mov	r2, r0
 8003d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d86:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d92:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003d94:	bf00      	nop
 8003d96:	3720      	adds	r7, #32
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003d9c:	b5b0      	push	{r4, r5, r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003da4:	f000 fe42 	bl	8004a2c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003da8:	4b4f      	ldr	r3, [pc, #316]	@ (8003ee8 <prvAddNewTaskToReadyList+0x14c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3301      	adds	r3, #1
 8003dae:	4a4e      	ldr	r2, [pc, #312]	@ (8003ee8 <prvAddNewTaskToReadyList+0x14c>)
 8003db0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003db2:	4b4e      	ldr	r3, [pc, #312]	@ (8003eec <prvAddNewTaskToReadyList+0x150>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d109      	bne.n	8003dce <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003dba:	4a4c      	ldr	r2, [pc, #304]	@ (8003eec <prvAddNewTaskToReadyList+0x150>)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003dc0:	4b49      	ldr	r3, [pc, #292]	@ (8003ee8 <prvAddNewTaskToReadyList+0x14c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d110      	bne.n	8003dea <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003dc8:	f000 fbe6 	bl	8004598 <prvInitialiseTaskLists>
 8003dcc:	e00d      	b.n	8003dea <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003dce:	4b48      	ldr	r3, [pc, #288]	@ (8003ef0 <prvAddNewTaskToReadyList+0x154>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003dd6:	4b45      	ldr	r3, [pc, #276]	@ (8003eec <prvAddNewTaskToReadyList+0x150>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d802      	bhi.n	8003dea <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003de4:	4a41      	ldr	r2, [pc, #260]	@ (8003eec <prvAddNewTaskToReadyList+0x150>)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003dea:	4b42      	ldr	r3, [pc, #264]	@ (8003ef4 <prvAddNewTaskToReadyList+0x158>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3301      	adds	r3, #1
 8003df0:	4a40      	ldr	r2, [pc, #256]	@ (8003ef4 <prvAddNewTaskToReadyList+0x158>)
 8003df2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003df4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ef4 <prvAddNewTaskToReadyList+0x158>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d016      	beq.n	8003e30 <prvAddNewTaskToReadyList+0x94>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f002 f831 	bl	8005e6c <SEGGER_SYSVIEW_OnTaskCreate>
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1a:	461d      	mov	r5, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	461c      	mov	r4, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e26:	1ae3      	subs	r3, r4, r3
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	462b      	mov	r3, r5
 8003e2c:	f001 f8b6 	bl	8004f9c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f002 f89e 	bl	8005f74 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	409a      	lsls	r2, r3
 8003e40:	4b2d      	ldr	r3, [pc, #180]	@ (8003ef8 <prvAddNewTaskToReadyList+0x15c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	4a2c      	ldr	r2, [pc, #176]	@ (8003ef8 <prvAddNewTaskToReadyList+0x15c>)
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e4e:	492b      	ldr	r1, [pc, #172]	@ (8003efc <prvAddNewTaskToReadyList+0x160>)
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	609a      	str	r2, [r3, #8]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	60da      	str	r2, [r3, #12]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	3204      	adds	r2, #4
 8003e76:	605a      	str	r2, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	1d1a      	adds	r2, r3, #4
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8003efc <prvAddNewTaskToReadyList+0x160>)
 8003e8e:	441a      	add	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	615a      	str	r2, [r3, #20]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e98:	4918      	ldr	r1, [pc, #96]	@ (8003efc <prvAddNewTaskToReadyList+0x160>)
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	1c59      	adds	r1, r3, #1
 8003ea8:	4814      	ldr	r0, [pc, #80]	@ (8003efc <prvAddNewTaskToReadyList+0x160>)
 8003eaa:	4613      	mov	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4403      	add	r3, r0
 8003eb4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003eb6:	f000 fdeb 	bl	8004a90 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003eba:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef0 <prvAddNewTaskToReadyList+0x154>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00e      	beq.n	8003ee0 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8003eec <prvAddNewTaskToReadyList+0x150>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d207      	bcs.n	8003ee0 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f00 <prvAddNewTaskToReadyList+0x164>)
 8003ed2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003ee0:	bf00      	nop
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ee8:	200001f8 	.word	0x200001f8
 8003eec:	20000120 	.word	0x20000120
 8003ef0:	20000204 	.word	0x20000204
 8003ef4:	20000214 	.word	0x20000214
 8003ef8:	20000200 	.word	0x20000200
 8003efc:	20000124 	.word	0x20000124
 8003f00:	e000ed04 	.word	0xe000ed04

08003f04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d018      	beq.n	8003f48 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003f16:	4b14      	ldr	r3, [pc, #80]	@ (8003f68 <vTaskDelay+0x64>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00b      	beq.n	8003f36 <vTaskDelay+0x32>
        __asm volatile
 8003f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	60bb      	str	r3, [r7, #8]
    }
 8003f30:	bf00      	nop
 8003f32:	bf00      	nop
 8003f34:	e7fd      	b.n	8003f32 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003f36:	f000 f877 	bl	8004028 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 fbc5 	bl	80046cc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003f42:	f000 f87f 	bl	8004044 <xTaskResumeAll>
 8003f46:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d107      	bne.n	8003f5e <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8003f4e:	4b07      	ldr	r3, [pc, #28]	@ (8003f6c <vTaskDelay+0x68>)
 8003f50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	f3bf 8f4f 	dsb	sy
 8003f5a:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003f5e:	bf00      	nop
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	20000220 	.word	0x20000220
 8003f6c:	e000ed04 	.word	0xe000ed04

08003f70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003f76:	4b24      	ldr	r3, [pc, #144]	@ (8004008 <vTaskStartScheduler+0x98>)
 8003f78:	9301      	str	r3, [sp, #4]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	2282      	movs	r2, #130	@ 0x82
 8003f82:	4922      	ldr	r1, [pc, #136]	@ (800400c <vTaskStartScheduler+0x9c>)
 8003f84:	4822      	ldr	r0, [pc, #136]	@ (8004010 <vTaskStartScheduler+0xa0>)
 8003f86:	f7ff fe33 	bl	8003bf0 <xTaskCreate>
 8003f8a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d124      	bne.n	8003fdc <vTaskStartScheduler+0x6c>
        __asm volatile
 8003f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f96:	f383 8811 	msr	BASEPRI, r3
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	60bb      	str	r3, [r7, #8]
    }
 8003fa4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8004014 <vTaskStartScheduler+0xa4>)
 8003fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fac:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003fae:	4b1a      	ldr	r3, [pc, #104]	@ (8004018 <vTaskStartScheduler+0xa8>)
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003fb4:	4b19      	ldr	r3, [pc, #100]	@ (800401c <vTaskStartScheduler+0xac>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003fba:	4b19      	ldr	r3, [pc, #100]	@ (8004020 <vTaskStartScheduler+0xb0>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	4b12      	ldr	r3, [pc, #72]	@ (8004008 <vTaskStartScheduler+0x98>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d102      	bne.n	8003fcc <vTaskStartScheduler+0x5c>
 8003fc6:	f001 ff35 	bl	8005e34 <SEGGER_SYSVIEW_OnIdle>
 8003fca:	e004      	b.n	8003fd6 <vTaskStartScheduler+0x66>
 8003fcc:	4b14      	ldr	r3, [pc, #80]	@ (8004020 <vTaskStartScheduler+0xb0>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f001 ff8d 	bl	8005ef0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003fd6:	f000 fc85 	bl	80048e4 <xPortStartScheduler>
 8003fda:	e00f      	b.n	8003ffc <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe2:	d10b      	bne.n	8003ffc <vTaskStartScheduler+0x8c>
        __asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	607b      	str	r3, [r7, #4]
    }
 8003ff6:	bf00      	nop
 8003ff8:	bf00      	nop
 8003ffa:	e7fd      	b.n	8003ff8 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003ffc:	4b09      	ldr	r3, [pc, #36]	@ (8004024 <vTaskStartScheduler+0xb4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
}
 8004000:	bf00      	nop
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	2000021c 	.word	0x2000021c
 800400c:	08006358 	.word	0x08006358
 8004010:	08004569 	.word	0x08004569
 8004014:	20000218 	.word	0x20000218
 8004018:	20000204 	.word	0x20000204
 800401c:	200001fc 	.word	0x200001fc
 8004020:	20000120 	.word	0x20000120
 8004024:	2000000c 	.word	0x2000000c

08004028 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800402c:	4b04      	ldr	r3, [pc, #16]	@ (8004040 <vTaskSuspendAll+0x18>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3301      	adds	r3, #1
 8004032:	4a03      	ldr	r2, [pc, #12]	@ (8004040 <vTaskSuspendAll+0x18>)
 8004034:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004036:	bf00      	nop
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	20000220 	.word	0x20000220

08004044 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800404a:	2300      	movs	r3, #0
 800404c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800404e:	2300      	movs	r3, #0
 8004050:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004052:	4b73      	ldr	r3, [pc, #460]	@ (8004220 <xTaskResumeAll+0x1dc>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10b      	bne.n	8004072 <xTaskResumeAll+0x2e>
        __asm volatile
 800405a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	607b      	str	r3, [r7, #4]
    }
 800406c:	bf00      	nop
 800406e:	bf00      	nop
 8004070:	e7fd      	b.n	800406e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004072:	f000 fcdb 	bl	8004a2c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004076:	4b6a      	ldr	r3, [pc, #424]	@ (8004220 <xTaskResumeAll+0x1dc>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3b01      	subs	r3, #1
 800407c:	4a68      	ldr	r2, [pc, #416]	@ (8004220 <xTaskResumeAll+0x1dc>)
 800407e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004080:	4b67      	ldr	r3, [pc, #412]	@ (8004220 <xTaskResumeAll+0x1dc>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	f040 80c4 	bne.w	8004212 <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800408a:	4b66      	ldr	r3, [pc, #408]	@ (8004224 <xTaskResumeAll+0x1e0>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 80bf 	beq.w	8004212 <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004094:	e08e      	b.n	80041b4 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004096:	4b64      	ldr	r3, [pc, #400]	@ (8004228 <xTaskResumeAll+0x1e4>)
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a2:	613b      	str	r3, [r7, #16]
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	6a12      	ldr	r2, [r2, #32]
 80040ac:	609a      	str	r2, [r3, #8]
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	69d2      	ldr	r2, [r2, #28]
 80040b6:	605a      	str	r2, [r3, #4]
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	3318      	adds	r3, #24
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d103      	bne.n	80040cc <xTaskResumeAll+0x88>
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	6a1a      	ldr	r2, [r3, #32]
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	605a      	str	r2, [r3, #4]
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	2200      	movs	r2, #0
 80040d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	1e5a      	subs	r2, r3, #1
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	69fa      	ldr	r2, [r7, #28]
 80040e8:	68d2      	ldr	r2, [r2, #12]
 80040ea:	609a      	str	r2, [r3, #8]
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	69fa      	ldr	r2, [r7, #28]
 80040f2:	6892      	ldr	r2, [r2, #8]
 80040f4:	605a      	str	r2, [r3, #4]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	3304      	adds	r3, #4
 80040fe:	429a      	cmp	r2, r3
 8004100:	d103      	bne.n	800410a <xTaskResumeAll+0xc6>
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	605a      	str	r2, [r3, #4]
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	2200      	movs	r2, #0
 800410e:	615a      	str	r2, [r3, #20]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	1e5a      	subs	r2, r3, #1
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	4618      	mov	r0, r3
 800411e:	f001 ff29 	bl	8005f74 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004126:	2201      	movs	r2, #1
 8004128:	409a      	lsls	r2, r3
 800412a:	4b40      	ldr	r3, [pc, #256]	@ (800422c <xTaskResumeAll+0x1e8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4313      	orrs	r3, r2
 8004130:	4a3e      	ldr	r2, [pc, #248]	@ (800422c <xTaskResumeAll+0x1e8>)
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004138:	493d      	ldr	r1, [pc, #244]	@ (8004230 <xTaskResumeAll+0x1ec>)
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	440b      	add	r3, r1
 8004144:	3304      	adds	r3, #4
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	609a      	str	r2, [r3, #8]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	60da      	str	r2, [r3, #12]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	69fa      	ldr	r2, [r7, #28]
 800415e:	3204      	adds	r2, #4
 8004160:	605a      	str	r2, [r3, #4]
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	1d1a      	adds	r2, r3, #4
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	609a      	str	r2, [r3, #8]
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800416e:	4613      	mov	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4a2e      	ldr	r2, [pc, #184]	@ (8004230 <xTaskResumeAll+0x1ec>)
 8004178:	441a      	add	r2, r3
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	615a      	str	r2, [r3, #20]
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004182:	492b      	ldr	r1, [pc, #172]	@ (8004230 <xTaskResumeAll+0x1ec>)
 8004184:	4613      	mov	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	1c59      	adds	r1, r3, #1
 8004192:	4827      	ldr	r0, [pc, #156]	@ (8004230 <xTaskResumeAll+0x1ec>)
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4403      	add	r3, r0
 800419e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041a4:	4b23      	ldr	r3, [pc, #140]	@ (8004234 <xTaskResumeAll+0x1f0>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d302      	bcc.n	80041b4 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 80041ae:	4b22      	ldr	r3, [pc, #136]	@ (8004238 <xTaskResumeAll+0x1f4>)
 80041b0:	2201      	movs	r2, #1
 80041b2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041b4:	4b1c      	ldr	r3, [pc, #112]	@ (8004228 <xTaskResumeAll+0x1e4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f47f af6c 	bne.w	8004096 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80041c4:	f000 fa66 	bl	8004694 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80041c8:	4b1c      	ldr	r3, [pc, #112]	@ (800423c <xTaskResumeAll+0x1f8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d010      	beq.n	80041f6 <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80041d4:	f000 f842 	bl	800425c <xTaskIncrementTick>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d002      	beq.n	80041e4 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 80041de:	4b16      	ldr	r3, [pc, #88]	@ (8004238 <xTaskResumeAll+0x1f4>)
 80041e0:	2201      	movs	r2, #1
 80041e2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	3b01      	subs	r3, #1
 80041e8:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1f1      	bne.n	80041d4 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 80041f0:	4b12      	ldr	r3, [pc, #72]	@ (800423c <xTaskResumeAll+0x1f8>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80041f6:	4b10      	ldr	r3, [pc, #64]	@ (8004238 <xTaskResumeAll+0x1f4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d009      	beq.n	8004212 <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80041fe:	2301      	movs	r3, #1
 8004200:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004202:	4b0f      	ldr	r3, [pc, #60]	@ (8004240 <xTaskResumeAll+0x1fc>)
 8004204:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004212:	f000 fc3d 	bl	8004a90 <vPortExitCritical>

    return xAlreadyYielded;
 8004216:	69bb      	ldr	r3, [r7, #24]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3720      	adds	r7, #32
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	20000220 	.word	0x20000220
 8004224:	200001f8 	.word	0x200001f8
 8004228:	200001b8 	.word	0x200001b8
 800422c:	20000200 	.word	0x20000200
 8004230:	20000124 	.word	0x20000124
 8004234:	20000120 	.word	0x20000120
 8004238:	2000020c 	.word	0x2000020c
 800423c:	20000208 	.word	0x20000208
 8004240:	e000ed04 	.word	0xe000ed04

08004244 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8004248:	4b03      	ldr	r3, [pc, #12]	@ (8004258 <uxTaskGetNumberOfTasks+0x14>)
 800424a:	681b      	ldr	r3, [r3, #0]
}
 800424c:	4618      	mov	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	200001f8 	.word	0x200001f8

0800425c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08a      	sub	sp, #40	@ 0x28
 8004260:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004262:	2300      	movs	r3, #0
 8004264:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004266:	4b80      	ldr	r3, [pc, #512]	@ (8004468 <xTaskIncrementTick+0x20c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	f040 80f1 	bne.w	8004452 <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004270:	4b7e      	ldr	r3, [pc, #504]	@ (800446c <xTaskIncrementTick+0x210>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3301      	adds	r3, #1
 8004276:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004278:	4a7c      	ldr	r2, [pc, #496]	@ (800446c <xTaskIncrementTick+0x210>)
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d121      	bne.n	80042c8 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8004284:	4b7a      	ldr	r3, [pc, #488]	@ (8004470 <xTaskIncrementTick+0x214>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00b      	beq.n	80042a6 <xTaskIncrementTick+0x4a>
        __asm volatile
 800428e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	607b      	str	r3, [r7, #4]
    }
 80042a0:	bf00      	nop
 80042a2:	bf00      	nop
 80042a4:	e7fd      	b.n	80042a2 <xTaskIncrementTick+0x46>
 80042a6:	4b72      	ldr	r3, [pc, #456]	@ (8004470 <xTaskIncrementTick+0x214>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	61fb      	str	r3, [r7, #28]
 80042ac:	4b71      	ldr	r3, [pc, #452]	@ (8004474 <xTaskIncrementTick+0x218>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a6f      	ldr	r2, [pc, #444]	@ (8004470 <xTaskIncrementTick+0x214>)
 80042b2:	6013      	str	r3, [r2, #0]
 80042b4:	4a6f      	ldr	r2, [pc, #444]	@ (8004474 <xTaskIncrementTick+0x218>)
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	4b6f      	ldr	r3, [pc, #444]	@ (8004478 <xTaskIncrementTick+0x21c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3301      	adds	r3, #1
 80042c0:	4a6d      	ldr	r2, [pc, #436]	@ (8004478 <xTaskIncrementTick+0x21c>)
 80042c2:	6013      	str	r3, [r2, #0]
 80042c4:	f000 f9e6 	bl	8004694 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80042c8:	4b6c      	ldr	r3, [pc, #432]	@ (800447c <xTaskIncrementTick+0x220>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6a3a      	ldr	r2, [r7, #32]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	f0c0 80aa 	bcc.w	8004428 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042d4:	4b66      	ldr	r3, [pc, #408]	@ (8004470 <xTaskIncrementTick+0x214>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d104      	bne.n	80042e8 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042de:	4b67      	ldr	r3, [pc, #412]	@ (800447c <xTaskIncrementTick+0x220>)
 80042e0:	f04f 32ff 	mov.w	r2, #4294967295
 80042e4:	601a      	str	r2, [r3, #0]
                    break;
 80042e6:	e09f      	b.n	8004428 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042e8:	4b61      	ldr	r3, [pc, #388]	@ (8004470 <xTaskIncrementTick+0x214>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80042f8:	6a3a      	ldr	r2, [r7, #32]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d203      	bcs.n	8004308 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004300:	4a5e      	ldr	r2, [pc, #376]	@ (800447c <xTaskIncrementTick+0x220>)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004306:	e08f      	b.n	8004428 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	613b      	str	r3, [r7, #16]
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	68d2      	ldr	r2, [r2, #12]
 8004316:	609a      	str	r2, [r3, #8]
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	6892      	ldr	r2, [r2, #8]
 8004320:	605a      	str	r2, [r3, #4]
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	3304      	adds	r3, #4
 800432a:	429a      	cmp	r2, r3
 800432c:	d103      	bne.n	8004336 <xTaskIncrementTick+0xda>
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	605a      	str	r2, [r3, #4]
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	2200      	movs	r2, #0
 800433a:	615a      	str	r2, [r3, #20]
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	1e5a      	subs	r2, r3, #1
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434a:	2b00      	cmp	r3, #0
 800434c:	d01e      	beq.n	800438c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	6a12      	ldr	r2, [r2, #32]
 800435c:	609a      	str	r2, [r3, #8]
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	69d2      	ldr	r2, [r2, #28]
 8004366:	605a      	str	r2, [r3, #4]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	3318      	adds	r3, #24
 8004370:	429a      	cmp	r2, r3
 8004372:	d103      	bne.n	800437c <xTaskIncrementTick+0x120>
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	6a1a      	ldr	r2, [r3, #32]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	605a      	str	r2, [r3, #4]
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	2200      	movs	r2, #0
 8004380:	629a      	str	r2, [r3, #40]	@ 0x28
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	1e5a      	subs	r2, r3, #1
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	4618      	mov	r0, r3
 8004390:	f001 fdf0 	bl	8005f74 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004398:	2201      	movs	r2, #1
 800439a:	409a      	lsls	r2, r3
 800439c:	4b38      	ldr	r3, [pc, #224]	@ (8004480 <xTaskIncrementTick+0x224>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	4a37      	ldr	r2, [pc, #220]	@ (8004480 <xTaskIncrementTick+0x224>)
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043aa:	4936      	ldr	r1, [pc, #216]	@ (8004484 <xTaskIncrementTick+0x228>)
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	3304      	adds	r3, #4
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	60bb      	str	r3, [r7, #8]
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	609a      	str	r2, [r3, #8]
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	60da      	str	r2, [r3, #12]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	3204      	adds	r2, #4
 80043d2:	605a      	str	r2, [r3, #4]
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	1d1a      	adds	r2, r3, #4
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	609a      	str	r2, [r3, #8]
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043e0:	4613      	mov	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4a26      	ldr	r2, [pc, #152]	@ (8004484 <xTaskIncrementTick+0x228>)
 80043ea:	441a      	add	r2, r3
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	615a      	str	r2, [r3, #20]
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043f4:	4923      	ldr	r1, [pc, #140]	@ (8004484 <xTaskIncrementTick+0x228>)
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	1c59      	adds	r1, r3, #1
 8004404:	481f      	ldr	r0, [pc, #124]	@ (8004484 <xTaskIncrementTick+0x228>)
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4403      	add	r3, r0
 8004410:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004416:	4b1c      	ldr	r3, [pc, #112]	@ (8004488 <xTaskIncrementTick+0x22c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441c:	429a      	cmp	r2, r3
 800441e:	f67f af59 	bls.w	80042d4 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8004422:	2301      	movs	r3, #1
 8004424:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004426:	e755      	b.n	80042d4 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004428:	4b17      	ldr	r3, [pc, #92]	@ (8004488 <xTaskIncrementTick+0x22c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800442e:	4915      	ldr	r1, [pc, #84]	@ (8004484 <xTaskIncrementTick+0x228>)
 8004430:	4613      	mov	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d901      	bls.n	8004444 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8004440:	2301      	movs	r3, #1
 8004442:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8004444:	4b11      	ldr	r3, [pc, #68]	@ (800448c <xTaskIncrementTick+0x230>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d007      	beq.n	800445c <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 800444c:	2301      	movs	r3, #1
 800444e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004450:	e004      	b.n	800445c <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004452:	4b0f      	ldr	r3, [pc, #60]	@ (8004490 <xTaskIncrementTick+0x234>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3301      	adds	r3, #1
 8004458:	4a0d      	ldr	r2, [pc, #52]	@ (8004490 <xTaskIncrementTick+0x234>)
 800445a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800445c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800445e:	4618      	mov	r0, r3
 8004460:	3728      	adds	r7, #40	@ 0x28
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	20000220 	.word	0x20000220
 800446c:	200001fc 	.word	0x200001fc
 8004470:	200001b0 	.word	0x200001b0
 8004474:	200001b4 	.word	0x200001b4
 8004478:	20000210 	.word	0x20000210
 800447c:	20000218 	.word	0x20000218
 8004480:	20000200 	.word	0x20000200
 8004484:	20000124 	.word	0x20000124
 8004488:	20000120 	.word	0x20000120
 800448c:	2000020c 	.word	0x2000020c
 8004490:	20000208 	.word	0x20000208

08004494 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800449a:	4b2d      	ldr	r3, [pc, #180]	@ (8004550 <vTaskSwitchContext+0xbc>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80044a2:	4b2c      	ldr	r3, [pc, #176]	@ (8004554 <vTaskSwitchContext+0xc0>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80044a8:	e04e      	b.n	8004548 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 80044aa:	4b2a      	ldr	r3, [pc, #168]	@ (8004554 <vTaskSwitchContext+0xc0>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044b0:	4b29      	ldr	r3, [pc, #164]	@ (8004558 <vTaskSwitchContext+0xc4>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	fab3 f383 	clz	r3, r3
 80044bc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80044be:	7afb      	ldrb	r3, [r7, #11]
 80044c0:	f1c3 031f 	rsb	r3, r3, #31
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	4925      	ldr	r1, [pc, #148]	@ (800455c <vTaskSwitchContext+0xc8>)
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	4613      	mov	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	440b      	add	r3, r1
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10b      	bne.n	80044f2 <vTaskSwitchContext+0x5e>
        __asm volatile
 80044da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	607b      	str	r3, [r7, #4]
    }
 80044ec:	bf00      	nop
 80044ee:	bf00      	nop
 80044f0:	e7fd      	b.n	80044ee <vTaskSwitchContext+0x5a>
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4613      	mov	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4a17      	ldr	r2, [pc, #92]	@ (800455c <vTaskSwitchContext+0xc8>)
 80044fe:	4413      	add	r3, r2
 8004500:	613b      	str	r3, [r7, #16]
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	605a      	str	r2, [r3, #4]
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	3308      	adds	r3, #8
 8004514:	429a      	cmp	r2, r3
 8004516:	d104      	bne.n	8004522 <vTaskSwitchContext+0x8e>
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	605a      	str	r2, [r3, #4]
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	4a0d      	ldr	r2, [pc, #52]	@ (8004560 <vTaskSwitchContext+0xcc>)
 800452a:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800452c:	4b0c      	ldr	r3, [pc, #48]	@ (8004560 <vTaskSwitchContext+0xcc>)
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	4b0c      	ldr	r3, [pc, #48]	@ (8004564 <vTaskSwitchContext+0xd0>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	429a      	cmp	r2, r3
 8004536:	d102      	bne.n	800453e <vTaskSwitchContext+0xaa>
 8004538:	f001 fc7c 	bl	8005e34 <SEGGER_SYSVIEW_OnIdle>
}
 800453c:	e004      	b.n	8004548 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800453e:	4b08      	ldr	r3, [pc, #32]	@ (8004560 <vTaskSwitchContext+0xcc>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f001 fcd4 	bl	8005ef0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8004548:	bf00      	nop
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	20000220 	.word	0x20000220
 8004554:	2000020c 	.word	0x2000020c
 8004558:	20000200 	.word	0x20000200
 800455c:	20000124 	.word	0x20000124
 8004560:	20000120 	.word	0x20000120
 8004564:	2000021c 	.word	0x2000021c

08004568 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004570:	f000 f852 	bl	8004618 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004574:	4b06      	ldr	r3, [pc, #24]	@ (8004590 <prvIdleTask+0x28>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d9f9      	bls.n	8004570 <prvIdleTask+0x8>
            {
                taskYIELD();
 800457c:	4b05      	ldr	r3, [pc, #20]	@ (8004594 <prvIdleTask+0x2c>)
 800457e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800458c:	e7f0      	b.n	8004570 <prvIdleTask+0x8>
 800458e:	bf00      	nop
 8004590:	20000124 	.word	0x20000124
 8004594:	e000ed04 	.word	0xe000ed04

08004598 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800459e:	2300      	movs	r3, #0
 80045a0:	607b      	str	r3, [r7, #4]
 80045a2:	e00c      	b.n	80045be <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4a12      	ldr	r2, [pc, #72]	@ (80045f8 <prvInitialiseTaskLists+0x60>)
 80045b0:	4413      	add	r3, r2
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff fa8c 	bl	8003ad0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3301      	adds	r3, #1
 80045bc:	607b      	str	r3, [r7, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d9ef      	bls.n	80045a4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80045c4:	480d      	ldr	r0, [pc, #52]	@ (80045fc <prvInitialiseTaskLists+0x64>)
 80045c6:	f7ff fa83 	bl	8003ad0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80045ca:	480d      	ldr	r0, [pc, #52]	@ (8004600 <prvInitialiseTaskLists+0x68>)
 80045cc:	f7ff fa80 	bl	8003ad0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80045d0:	480c      	ldr	r0, [pc, #48]	@ (8004604 <prvInitialiseTaskLists+0x6c>)
 80045d2:	f7ff fa7d 	bl	8003ad0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80045d6:	480c      	ldr	r0, [pc, #48]	@ (8004608 <prvInitialiseTaskLists+0x70>)
 80045d8:	f7ff fa7a 	bl	8003ad0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80045dc:	480b      	ldr	r0, [pc, #44]	@ (800460c <prvInitialiseTaskLists+0x74>)
 80045de:	f7ff fa77 	bl	8003ad0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80045e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <prvInitialiseTaskLists+0x78>)
 80045e4:	4a05      	ldr	r2, [pc, #20]	@ (80045fc <prvInitialiseTaskLists+0x64>)
 80045e6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004614 <prvInitialiseTaskLists+0x7c>)
 80045ea:	4a05      	ldr	r2, [pc, #20]	@ (8004600 <prvInitialiseTaskLists+0x68>)
 80045ec:	601a      	str	r2, [r3, #0]
}
 80045ee:	bf00      	nop
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	20000124 	.word	0x20000124
 80045fc:	20000188 	.word	0x20000188
 8004600:	2000019c 	.word	0x2000019c
 8004604:	200001b8 	.word	0x200001b8
 8004608:	200001cc 	.word	0x200001cc
 800460c:	200001e4 	.word	0x200001e4
 8004610:	200001b0 	.word	0x200001b0
 8004614:	200001b4 	.word	0x200001b4

08004618 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800461e:	e019      	b.n	8004654 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8004620:	f000 fa04 	bl	8004a2c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004624:	4b10      	ldr	r3, [pc, #64]	@ (8004668 <prvCheckTasksWaitingTermination+0x50>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3304      	adds	r3, #4
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff fab3 	bl	8003b9c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8004636:	4b0d      	ldr	r3, [pc, #52]	@ (800466c <prvCheckTasksWaitingTermination+0x54>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3b01      	subs	r3, #1
 800463c:	4a0b      	ldr	r2, [pc, #44]	@ (800466c <prvCheckTasksWaitingTermination+0x54>)
 800463e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8004640:	4b0b      	ldr	r3, [pc, #44]	@ (8004670 <prvCheckTasksWaitingTermination+0x58>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3b01      	subs	r3, #1
 8004646:	4a0a      	ldr	r2, [pc, #40]	@ (8004670 <prvCheckTasksWaitingTermination+0x58>)
 8004648:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800464a:	f000 fa21 	bl	8004a90 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f810 	bl	8004674 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004654:	4b06      	ldr	r3, [pc, #24]	@ (8004670 <prvCheckTasksWaitingTermination+0x58>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e1      	bne.n	8004620 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800465c:	bf00      	nop
 800465e:	bf00      	nop
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	200001cc 	.word	0x200001cc
 800466c:	200001f8 	.word	0x200001f8
 8004670:	200001e0 	.word	0x200001e0

08004674 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004680:	4618      	mov	r0, r3
 8004682:	f000 fb77 	bl	8004d74 <vPortFree>
            vPortFree( pxTCB );
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fb74 	bl	8004d74 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800468c:	bf00      	nop
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004698:	4b0a      	ldr	r3, [pc, #40]	@ (80046c4 <prvResetNextTaskUnblockTime+0x30>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d104      	bne.n	80046ac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80046a2:	4b09      	ldr	r3, [pc, #36]	@ (80046c8 <prvResetNextTaskUnblockTime+0x34>)
 80046a4:	f04f 32ff 	mov.w	r2, #4294967295
 80046a8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80046aa:	e005      	b.n	80046b8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046ac:	4b05      	ldr	r3, [pc, #20]	@ (80046c4 <prvResetNextTaskUnblockTime+0x30>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a04      	ldr	r2, [pc, #16]	@ (80046c8 <prvResetNextTaskUnblockTime+0x34>)
 80046b6:	6013      	str	r3, [r2, #0]
}
 80046b8:	bf00      	nop
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	200001b0 	.word	0x200001b0
 80046c8:	20000218 	.word	0x20000218

080046cc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80046d6:	4b36      	ldr	r3, [pc, #216]	@ (80047b0 <prvAddCurrentTaskToDelayedList+0xe4>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046dc:	4b35      	ldr	r3, [pc, #212]	@ (80047b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3304      	adds	r3, #4
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff fa5a 	bl	8003b9c <uxListRemove>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10b      	bne.n	8004706 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80046ee:	4b31      	ldr	r3, [pc, #196]	@ (80047b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f4:	2201      	movs	r2, #1
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	43da      	mvns	r2, r3
 80046fc:	4b2e      	ldr	r3, [pc, #184]	@ (80047b8 <prvAddCurrentTaskToDelayedList+0xec>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4013      	ands	r3, r2
 8004702:	4a2d      	ldr	r2, [pc, #180]	@ (80047b8 <prvAddCurrentTaskToDelayedList+0xec>)
 8004704:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470c:	d124      	bne.n	8004758 <prvAddCurrentTaskToDelayedList+0x8c>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d021      	beq.n	8004758 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004714:	4b29      	ldr	r3, [pc, #164]	@ (80047bc <prvAddCurrentTaskToDelayedList+0xf0>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	4b26      	ldr	r3, [pc, #152]	@ (80047b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	609a      	str	r2, [r3, #8]
 8004722:	4b24      	ldr	r3, [pc, #144]	@ (80047b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	6892      	ldr	r2, [r2, #8]
 800472a:	60da      	str	r2, [r3, #12]
 800472c:	4b21      	ldr	r3, [pc, #132]	@ (80047b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	3204      	adds	r2, #4
 8004736:	605a      	str	r2, [r3, #4]
 8004738:	4b1e      	ldr	r3, [pc, #120]	@ (80047b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	1d1a      	adds	r2, r3, #4
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	609a      	str	r2, [r3, #8]
 8004742:	4b1c      	ldr	r3, [pc, #112]	@ (80047b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a1d      	ldr	r2, [pc, #116]	@ (80047bc <prvAddCurrentTaskToDelayedList+0xf0>)
 8004748:	615a      	str	r2, [r3, #20]
 800474a:	4b1c      	ldr	r3, [pc, #112]	@ (80047bc <prvAddCurrentTaskToDelayedList+0xf0>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3301      	adds	r3, #1
 8004750:	4a1a      	ldr	r2, [pc, #104]	@ (80047bc <prvAddCurrentTaskToDelayedList+0xf0>)
 8004752:	6013      	str	r3, [r2, #0]
 8004754:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004756:	e026      	b.n	80047a6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4413      	add	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004760:	4b14      	ldr	r3, [pc, #80]	@ (80047b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	429a      	cmp	r2, r3
 800476e:	d209      	bcs.n	8004784 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004770:	4b13      	ldr	r3, [pc, #76]	@ (80047c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	4b0f      	ldr	r3, [pc, #60]	@ (80047b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3304      	adds	r3, #4
 800477a:	4619      	mov	r1, r3
 800477c:	4610      	mov	r0, r2
 800477e:	f7ff f9d4 	bl	8003b2a <vListInsert>
}
 8004782:	e010      	b.n	80047a6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004784:	4b0f      	ldr	r3, [pc, #60]	@ (80047c4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	4b0a      	ldr	r3, [pc, #40]	@ (80047b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3304      	adds	r3, #4
 800478e:	4619      	mov	r1, r3
 8004790:	4610      	mov	r0, r2
 8004792:	f7ff f9ca 	bl	8003b2a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004796:	4b0c      	ldr	r3, [pc, #48]	@ (80047c8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	429a      	cmp	r2, r3
 800479e:	d202      	bcs.n	80047a6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80047a0:	4a09      	ldr	r2, [pc, #36]	@ (80047c8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6013      	str	r3, [r2, #0]
}
 80047a6:	bf00      	nop
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	200001fc 	.word	0x200001fc
 80047b4:	20000120 	.word	0x20000120
 80047b8:	20000200 	.word	0x20000200
 80047bc:	200001e4 	.word	0x200001e4
 80047c0:	200001b4 	.word	0x200001b4
 80047c4:	200001b0 	.word	0x200001b0
 80047c8:	20000218 	.word	0x20000218

080047cc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3b04      	subs	r3, #4
 80047dc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	3b04      	subs	r3, #4
 80047ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f023 0201 	bic.w	r2, r3, #1
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	3b04      	subs	r3, #4
 80047fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80047fc:	4a0c      	ldr	r2, [pc, #48]	@ (8004830 <pxPortInitialiseStack+0x64>)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	3b14      	subs	r3, #20
 8004806:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	3b04      	subs	r3, #4
 8004812:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f06f 0202 	mvn.w	r2, #2
 800481a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3b20      	subs	r3, #32
 8004820:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004822:	68fb      	ldr	r3, [r7, #12]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	08004835 	.word	0x08004835

08004834 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800483a:	2300      	movs	r3, #0
 800483c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800483e:	4b13      	ldr	r3, [pc, #76]	@ (800488c <prvTaskExitError+0x58>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004846:	d00b      	beq.n	8004860 <prvTaskExitError+0x2c>
        __asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	60fb      	str	r3, [r7, #12]
    }
 800485a:	bf00      	nop
 800485c:	bf00      	nop
 800485e:	e7fd      	b.n	800485c <prvTaskExitError+0x28>
        __asm volatile
 8004860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	60bb      	str	r3, [r7, #8]
    }
 8004872:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004874:	bf00      	nop
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0fc      	beq.n	8004876 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800487c:	bf00      	nop
 800487e:	bf00      	nop
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	20000010 	.word	0x20000010

08004890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004890:	4b07      	ldr	r3, [pc, #28]	@ (80048b0 <pxCurrentTCBConst2>)
 8004892:	6819      	ldr	r1, [r3, #0]
 8004894:	6808      	ldr	r0, [r1, #0]
 8004896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489a:	f380 8809 	msr	PSP, r0
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f04f 0000 	mov.w	r0, #0
 80048a6:	f380 8811 	msr	BASEPRI, r0
 80048aa:	4770      	bx	lr
 80048ac:	f3af 8000 	nop.w

080048b0 <pxCurrentTCBConst2>:
 80048b0:	20000120 	.word	0x20000120
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop

080048b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80048b8:	4808      	ldr	r0, [pc, #32]	@ (80048dc <prvPortStartFirstTask+0x24>)
 80048ba:	6800      	ldr	r0, [r0, #0]
 80048bc:	6800      	ldr	r0, [r0, #0]
 80048be:	f380 8808 	msr	MSP, r0
 80048c2:	f04f 0000 	mov.w	r0, #0
 80048c6:	f380 8814 	msr	CONTROL, r0
 80048ca:	b662      	cpsie	i
 80048cc:	b661      	cpsie	f
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	df00      	svc	0
 80048d8:	bf00      	nop
 80048da:	0000      	.short	0x0000
 80048dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80048e0:	bf00      	nop
 80048e2:	bf00      	nop

080048e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048ea:	4b47      	ldr	r3, [pc, #284]	@ (8004a08 <xPortStartScheduler+0x124>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a47      	ldr	r2, [pc, #284]	@ (8004a0c <xPortStartScheduler+0x128>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d10b      	bne.n	800490c <xPortStartScheduler+0x28>
        __asm volatile
 80048f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	613b      	str	r3, [r7, #16]
    }
 8004906:	bf00      	nop
 8004908:	bf00      	nop
 800490a:	e7fd      	b.n	8004908 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800490c:	4b3e      	ldr	r3, [pc, #248]	@ (8004a08 <xPortStartScheduler+0x124>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a3f      	ldr	r2, [pc, #252]	@ (8004a10 <xPortStartScheduler+0x12c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d10b      	bne.n	800492e <xPortStartScheduler+0x4a>
        __asm volatile
 8004916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	60fb      	str	r3, [r7, #12]
    }
 8004928:	bf00      	nop
 800492a:	bf00      	nop
 800492c:	e7fd      	b.n	800492a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800492e:	4b39      	ldr	r3, [pc, #228]	@ (8004a14 <xPortStartScheduler+0x130>)
 8004930:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	b2db      	uxtb	r3, r3
 8004938:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	22ff      	movs	r2, #255	@ 0xff
 800493e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004950:	b2da      	uxtb	r2, r3
 8004952:	4b31      	ldr	r3, [pc, #196]	@ (8004a18 <xPortStartScheduler+0x134>)
 8004954:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004956:	4b31      	ldr	r3, [pc, #196]	@ (8004a1c <xPortStartScheduler+0x138>)
 8004958:	2207      	movs	r2, #7
 800495a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800495c:	e009      	b.n	8004972 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800495e:	4b2f      	ldr	r3, [pc, #188]	@ (8004a1c <xPortStartScheduler+0x138>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3b01      	subs	r3, #1
 8004964:	4a2d      	ldr	r2, [pc, #180]	@ (8004a1c <xPortStartScheduler+0x138>)
 8004966:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	b2db      	uxtb	r3, r3
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	b2db      	uxtb	r3, r3
 8004970:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004972:	78fb      	ldrb	r3, [r7, #3]
 8004974:	b2db      	uxtb	r3, r3
 8004976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800497a:	2b80      	cmp	r3, #128	@ 0x80
 800497c:	d0ef      	beq.n	800495e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800497e:	4b27      	ldr	r3, [pc, #156]	@ (8004a1c <xPortStartScheduler+0x138>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f1c3 0307 	rsb	r3, r3, #7
 8004986:	2b04      	cmp	r3, #4
 8004988:	d00b      	beq.n	80049a2 <xPortStartScheduler+0xbe>
        __asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	60bb      	str	r3, [r7, #8]
    }
 800499c:	bf00      	nop
 800499e:	bf00      	nop
 80049a0:	e7fd      	b.n	800499e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049a2:	4b1e      	ldr	r3, [pc, #120]	@ (8004a1c <xPortStartScheduler+0x138>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	021b      	lsls	r3, r3, #8
 80049a8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a1c <xPortStartScheduler+0x138>)
 80049aa:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049ac:	4b1b      	ldr	r3, [pc, #108]	@ (8004a1c <xPortStartScheduler+0x138>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80049b4:	4a19      	ldr	r2, [pc, #100]	@ (8004a1c <xPortStartScheduler+0x138>)
 80049b6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80049c0:	4b17      	ldr	r3, [pc, #92]	@ (8004a20 <xPortStartScheduler+0x13c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a16      	ldr	r2, [pc, #88]	@ (8004a20 <xPortStartScheduler+0x13c>)
 80049c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80049ca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80049cc:	4b14      	ldr	r3, [pc, #80]	@ (8004a20 <xPortStartScheduler+0x13c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a13      	ldr	r2, [pc, #76]	@ (8004a20 <xPortStartScheduler+0x13c>)
 80049d2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80049d6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80049d8:	f000 f8e0 	bl	8004b9c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80049dc:	4b11      	ldr	r3, [pc, #68]	@ (8004a24 <xPortStartScheduler+0x140>)
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80049e2:	f000 f8ff 	bl	8004be4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049e6:	4b10      	ldr	r3, [pc, #64]	@ (8004a28 <xPortStartScheduler+0x144>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a0f      	ldr	r2, [pc, #60]	@ (8004a28 <xPortStartScheduler+0x144>)
 80049ec:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80049f0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80049f2:	f7ff ff61 	bl	80048b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80049f6:	f7ff fd4d 	bl	8004494 <vTaskSwitchContext>
    prvTaskExitError();
 80049fa:	f7ff ff1b 	bl	8004834 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	e000ed00 	.word	0xe000ed00
 8004a0c:	410fc271 	.word	0x410fc271
 8004a10:	410fc270 	.word	0x410fc270
 8004a14:	e000e400 	.word	0xe000e400
 8004a18:	20000224 	.word	0x20000224
 8004a1c:	20000228 	.word	0x20000228
 8004a20:	e000ed20 	.word	0xe000ed20
 8004a24:	20000010 	.word	0x20000010
 8004a28:	e000ef34 	.word	0xe000ef34

08004a2c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
        __asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	607b      	str	r3, [r7, #4]
    }
 8004a44:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004a46:	4b10      	ldr	r3, [pc, #64]	@ (8004a88 <vPortEnterCritical+0x5c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	4a0e      	ldr	r2, [pc, #56]	@ (8004a88 <vPortEnterCritical+0x5c>)
 8004a4e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004a50:	4b0d      	ldr	r3, [pc, #52]	@ (8004a88 <vPortEnterCritical+0x5c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d110      	bne.n	8004a7a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a58:	4b0c      	ldr	r3, [pc, #48]	@ (8004a8c <vPortEnterCritical+0x60>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00b      	beq.n	8004a7a <vPortEnterCritical+0x4e>
        __asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	603b      	str	r3, [r7, #0]
    }
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop
 8004a78:	e7fd      	b.n	8004a76 <vPortEnterCritical+0x4a>
    }
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	20000010 	.word	0x20000010
 8004a8c:	e000ed04 	.word	0xe000ed04

08004a90 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004a96:	4b12      	ldr	r3, [pc, #72]	@ (8004ae0 <vPortExitCritical+0x50>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10b      	bne.n	8004ab6 <vPortExitCritical+0x26>
        __asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	607b      	str	r3, [r7, #4]
    }
 8004ab0:	bf00      	nop
 8004ab2:	bf00      	nop
 8004ab4:	e7fd      	b.n	8004ab2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae0 <vPortExitCritical+0x50>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	4a08      	ldr	r2, [pc, #32]	@ (8004ae0 <vPortExitCritical+0x50>)
 8004abe:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004ac0:	4b07      	ldr	r3, [pc, #28]	@ (8004ae0 <vPortExitCritical+0x50>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d105      	bne.n	8004ad4 <vPortExitCritical+0x44>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004ad2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	20000010 	.word	0x20000010
	...

08004af0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004af0:	f3ef 8009 	mrs	r0, PSP
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	4b15      	ldr	r3, [pc, #84]	@ (8004b50 <pxCurrentTCBConst>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	f01e 0f10 	tst.w	lr, #16
 8004b00:	bf08      	it	eq
 8004b02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b0a:	6010      	str	r0, [r2, #0]
 8004b0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004b14:	f380 8811 	msr	BASEPRI, r0
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f7ff fcb8 	bl	8004494 <vTaskSwitchContext>
 8004b24:	f04f 0000 	mov.w	r0, #0
 8004b28:	f380 8811 	msr	BASEPRI, r0
 8004b2c:	bc09      	pop	{r0, r3}
 8004b2e:	6819      	ldr	r1, [r3, #0]
 8004b30:	6808      	ldr	r0, [r1, #0]
 8004b32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b36:	f01e 0f10 	tst.w	lr, #16
 8004b3a:	bf08      	it	eq
 8004b3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b40:	f380 8809 	msr	PSP, r0
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	f3af 8000 	nop.w

08004b50 <pxCurrentTCBConst>:
 8004b50:	20000120 	.word	0x20000120
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004b54:	bf00      	nop
 8004b56:	bf00      	nop

08004b58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
        __asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	607b      	str	r3, [r7, #4]
    }
 8004b70:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004b72:	f7ff fb73 	bl	800425c <xTaskIncrementTick>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b7c:	4b06      	ldr	r3, [pc, #24]	@ (8004b98 <SysTick_Handler+0x40>)
 8004b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	2300      	movs	r3, #0
 8004b86:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	f383 8811 	msr	BASEPRI, r3
    }
 8004b8e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004b90:	bf00      	nop
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	e000ed04 	.word	0xe000ed04

08004b9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd0 <vPortSetupTimerInterrupt+0x34>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd4 <vPortSetupTimerInterrupt+0x38>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004bac:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd8 <vPortSetupTimerInterrupt+0x3c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8004bdc <vPortSetupTimerInterrupt+0x40>)
 8004bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb6:	099b      	lsrs	r3, r3, #6
 8004bb8:	4a09      	ldr	r2, [pc, #36]	@ (8004be0 <vPortSetupTimerInterrupt+0x44>)
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004bbe:	4b04      	ldr	r3, [pc, #16]	@ (8004bd0 <vPortSetupTimerInterrupt+0x34>)
 8004bc0:	2207      	movs	r2, #7
 8004bc2:	601a      	str	r2, [r3, #0]
}
 8004bc4:	bf00      	nop
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	e000e010 	.word	0xe000e010
 8004bd4:	e000e018 	.word	0xe000e018
 8004bd8:	20000000 	.word	0x20000000
 8004bdc:	10624dd3 	.word	0x10624dd3
 8004be0:	e000e014 	.word	0xe000e014

08004be4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004be4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004bf4 <vPortEnableVFP+0x10>
 8004be8:	6801      	ldr	r1, [r0, #0]
 8004bea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004bee:	6001      	str	r1, [r0, #0]
 8004bf0:	4770      	bx	lr
 8004bf2:	0000      	.short	0x0000
 8004bf4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004bf8:	bf00      	nop
 8004bfa:	bf00      	nop

08004bfc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08a      	sub	sp, #40	@ 0x28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004c04:	2300      	movs	r3, #0
 8004c06:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004c08:	f7ff fa0e 	bl	8004028 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004c0c:	4b54      	ldr	r3, [pc, #336]	@ (8004d60 <pvPortMalloc+0x164>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004c14:	f000 f90c 	bl	8004e30 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d012      	beq.n	8004c44 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004c1e:	2208      	movs	r2, #8
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	3308      	adds	r3, #8
 8004c2a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	43db      	mvns	r3, r3
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d804      	bhi.n	8004c40 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	607b      	str	r3, [r7, #4]
 8004c3e:	e001      	b.n	8004c44 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004c40:	2300      	movs	r3, #0
 8004c42:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	db71      	blt.n	8004d2e <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d06e      	beq.n	8004d2e <pvPortMalloc+0x132>
 8004c50:	4b44      	ldr	r3, [pc, #272]	@ (8004d64 <pvPortMalloc+0x168>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d869      	bhi.n	8004d2e <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004c5a:	4b43      	ldr	r3, [pc, #268]	@ (8004d68 <pvPortMalloc+0x16c>)
 8004c5c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004c5e:	4b42      	ldr	r3, [pc, #264]	@ (8004d68 <pvPortMalloc+0x16c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c64:	e004      	b.n	8004c70 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c68:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d903      	bls.n	8004c82 <pvPortMalloc+0x86>
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1f1      	bne.n	8004c66 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004c82:	4b37      	ldr	r3, [pc, #220]	@ (8004d60 <pvPortMalloc+0x164>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d050      	beq.n	8004d2e <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2208      	movs	r2, #8
 8004c92:	4413      	add	r3, r2
 8004c94:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	1ad2      	subs	r2, r2, r3
 8004ca6:	2308      	movs	r3, #8
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d920      	bls.n	8004cf0 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00b      	beq.n	8004cd8 <pvPortMalloc+0xdc>
        __asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	613b      	str	r3, [r7, #16]
    }
 8004cd2:	bf00      	nop
 8004cd4:	bf00      	nop
 8004cd6:	e7fd      	b.n	8004cd4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	1ad2      	subs	r2, r2, r3
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004cea:	6978      	ldr	r0, [r7, #20]
 8004cec:	f000 f8fc 	bl	8004ee8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8004d64 <pvPortMalloc+0x168>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8004d64 <pvPortMalloc+0x168>)
 8004cfc:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004cfe:	4b19      	ldr	r3, [pc, #100]	@ (8004d64 <pvPortMalloc+0x168>)
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	4b1a      	ldr	r3, [pc, #104]	@ (8004d6c <pvPortMalloc+0x170>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d203      	bcs.n	8004d12 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d0a:	4b16      	ldr	r3, [pc, #88]	@ (8004d64 <pvPortMalloc+0x168>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a17      	ldr	r2, [pc, #92]	@ (8004d6c <pvPortMalloc+0x170>)
 8004d10:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004d24:	4b12      	ldr	r3, [pc, #72]	@ (8004d70 <pvPortMalloc+0x174>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	4a11      	ldr	r2, [pc, #68]	@ (8004d70 <pvPortMalloc+0x174>)
 8004d2c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004d2e:	f7ff f989 	bl	8004044 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00b      	beq.n	8004d54 <pvPortMalloc+0x158>
        __asm volatile
 8004d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	60fb      	str	r3, [r7, #12]
    }
 8004d4e:	bf00      	nop
 8004d50:	bf00      	nop
 8004d52:	e7fd      	b.n	8004d50 <pvPortMalloc+0x154>
    return pvReturn;
 8004d54:	69fb      	ldr	r3, [r7, #28]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3728      	adds	r7, #40	@ 0x28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	20012e34 	.word	0x20012e34
 8004d64:	20012e38 	.word	0x20012e38
 8004d68:	20012e2c 	.word	0x20012e2c
 8004d6c:	20012e3c 	.word	0x20012e3c
 8004d70:	20012e40 	.word	0x20012e40

08004d74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d04b      	beq.n	8004e1e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004d86:	2308      	movs	r3, #8
 8004d88:	425b      	negs	r3, r3
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	db0b      	blt.n	8004db4 <vPortFree+0x40>
        __asm volatile
 8004d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	60fb      	str	r3, [r7, #12]
    }
 8004dae:	bf00      	nop
 8004db0:	bf00      	nop
 8004db2:	e7fd      	b.n	8004db0 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00b      	beq.n	8004dd4 <vPortFree+0x60>
        __asm volatile
 8004dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	60bb      	str	r3, [r7, #8]
    }
 8004dce:	bf00      	nop
 8004dd0:	bf00      	nop
 8004dd2:	e7fd      	b.n	8004dd0 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	0fdb      	lsrs	r3, r3, #31
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01c      	beq.n	8004e1e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d118      	bne.n	8004e1e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004df8:	f7ff f916 	bl	8004028 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	4b09      	ldr	r3, [pc, #36]	@ (8004e28 <vPortFree+0xb4>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4413      	add	r3, r2
 8004e06:	4a08      	ldr	r2, [pc, #32]	@ (8004e28 <vPortFree+0xb4>)
 8004e08:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e0a:	6938      	ldr	r0, [r7, #16]
 8004e0c:	f000 f86c 	bl	8004ee8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004e10:	4b06      	ldr	r3, [pc, #24]	@ (8004e2c <vPortFree+0xb8>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3301      	adds	r3, #1
 8004e16:	4a05      	ldr	r2, [pc, #20]	@ (8004e2c <vPortFree+0xb8>)
 8004e18:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004e1a:	f7ff f913 	bl	8004044 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004e1e:	bf00      	nop
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20012e38 	.word	0x20012e38
 8004e2c:	20012e44 	.word	0x20012e44

08004e30 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e36:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8004e3a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004e3c:	4b25      	ldr	r3, [pc, #148]	@ (8004ed4 <prvHeapInit+0xa4>)
 8004e3e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00c      	beq.n	8004e64 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	3307      	adds	r3, #7
 8004e4e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 0307 	bic.w	r3, r3, #7
 8004e56:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ed4 <prvHeapInit+0xa4>)
 8004e60:	4413      	add	r3, r2
 8004e62:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e68:	4a1b      	ldr	r2, [pc, #108]	@ (8004ed8 <prvHeapInit+0xa8>)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ed8 <prvHeapInit+0xa8>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	4413      	add	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004e7c:	2208      	movs	r2, #8
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	1a9b      	subs	r3, r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0307 	bic.w	r3, r3, #7
 8004e8a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4a13      	ldr	r2, [pc, #76]	@ (8004edc <prvHeapInit+0xac>)
 8004e90:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004e92:	4b12      	ldr	r3, [pc, #72]	@ (8004edc <prvHeapInit+0xac>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2200      	movs	r2, #0
 8004e98:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004e9a:	4b10      	ldr	r3, [pc, #64]	@ (8004edc <prvHeapInit+0xac>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	1ad2      	subs	r2, r2, r3
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8004edc <prvHeapInit+0xac>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	4a08      	ldr	r2, [pc, #32]	@ (8004ee0 <prvHeapInit+0xb0>)
 8004ebe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	4a07      	ldr	r2, [pc, #28]	@ (8004ee4 <prvHeapInit+0xb4>)
 8004ec6:	6013      	str	r3, [r2, #0]
}
 8004ec8:	bf00      	nop
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	2000022c 	.word	0x2000022c
 8004ed8:	20012e2c 	.word	0x20012e2c
 8004edc:	20012e34 	.word	0x20012e34
 8004ee0:	20012e3c 	.word	0x20012e3c
 8004ee4:	20012e38 	.word	0x20012e38

08004ee8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ef0:	4b28      	ldr	r3, [pc, #160]	@ (8004f94 <prvInsertBlockIntoFreeList+0xac>)
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	e002      	b.n	8004efc <prvInsertBlockIntoFreeList+0x14>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d8f7      	bhi.n	8004ef6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	4413      	add	r3, r2
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d108      	bne.n	8004f2a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	441a      	add	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	441a      	add	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d118      	bne.n	8004f70 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	4b15      	ldr	r3, [pc, #84]	@ (8004f98 <prvInsertBlockIntoFreeList+0xb0>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d00d      	beq.n	8004f66 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	441a      	add	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	e008      	b.n	8004f78 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f66:	4b0c      	ldr	r3, [pc, #48]	@ (8004f98 <prvInsertBlockIntoFreeList+0xb0>)
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	e003      	b.n	8004f78 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d002      	beq.n	8004f86 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004f86:	bf00      	nop
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	20012e2c 	.word	0x20012e2c
 8004f98:	20012e34 	.word	0x20012e34

08004f9c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af02      	add	r7, sp, #8
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004faa:	2205      	movs	r2, #5
 8004fac:	492b      	ldr	r1, [pc, #172]	@ (800505c <SYSVIEW_AddTask+0xc0>)
 8004fae:	68b8      	ldr	r0, [r7, #8]
 8004fb0:	f001 f964 	bl	800627c <memcmp>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d04b      	beq.n	8005052 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004fba:	4b29      	ldr	r3, [pc, #164]	@ (8005060 <SYSVIEW_AddTask+0xc4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b07      	cmp	r3, #7
 8004fc0:	d903      	bls.n	8004fca <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004fc2:	4828      	ldr	r0, [pc, #160]	@ (8005064 <SYSVIEW_AddTask+0xc8>)
 8004fc4:	f001 f8fe 	bl	80061c4 <SEGGER_SYSVIEW_Warn>
    return;
 8004fc8:	e044      	b.n	8005054 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004fca:	4b25      	ldr	r3, [pc, #148]	@ (8005060 <SYSVIEW_AddTask+0xc4>)
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	4926      	ldr	r1, [pc, #152]	@ (8005068 <SYSVIEW_AddTask+0xcc>)
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004fde:	4b20      	ldr	r3, [pc, #128]	@ (8005060 <SYSVIEW_AddTask+0xc4>)
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	4921      	ldr	r1, [pc, #132]	@ (8005068 <SYSVIEW_AddTask+0xcc>)
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	440b      	add	r3, r1
 8004fee:	3304      	adds	r3, #4
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8005060 <SYSVIEW_AddTask+0xc4>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	491b      	ldr	r1, [pc, #108]	@ (8005068 <SYSVIEW_AddTask+0xcc>)
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	3308      	adds	r3, #8
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800500a:	4b15      	ldr	r3, [pc, #84]	@ (8005060 <SYSVIEW_AddTask+0xc4>)
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	4916      	ldr	r1, [pc, #88]	@ (8005068 <SYSVIEW_AddTask+0xcc>)
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	330c      	adds	r3, #12
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005020:	4b0f      	ldr	r3, [pc, #60]	@ (8005060 <SYSVIEW_AddTask+0xc4>)
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	4910      	ldr	r1, [pc, #64]	@ (8005068 <SYSVIEW_AddTask+0xcc>)
 8005026:	4613      	mov	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	440b      	add	r3, r1
 8005030:	3310      	adds	r3, #16
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005036:	4b0a      	ldr	r3, [pc, #40]	@ (8005060 <SYSVIEW_AddTask+0xc4>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3301      	adds	r3, #1
 800503c:	4a08      	ldr	r2, [pc, #32]	@ (8005060 <SYSVIEW_AddTask+0xc4>)
 800503e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	68b9      	ldr	r1, [r7, #8]
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 f80e 	bl	800506c <SYSVIEW_SendTaskInfo>
 8005050:	e000      	b.n	8005054 <SYSVIEW_AddTask+0xb8>
    return;
 8005052:	bf00      	nop

}
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	08006360 	.word	0x08006360
 8005060:	20012ee8 	.word	0x20012ee8
 8005064:	08006368 	.word	0x08006368
 8005068:	20012e48 	.word	0x20012e48

0800506c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800506c:	b580      	push	{r7, lr}
 800506e:	b08a      	sub	sp, #40	@ 0x28
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
 8005078:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800507a:	f107 0314 	add.w	r3, r7, #20
 800507e:	2214      	movs	r2, #20
 8005080:	2100      	movs	r1, #0
 8005082:	4618      	mov	r0, r3
 8005084:	f001 f90a 	bl	800629c <memset>
  TaskInfo.TaskID     = TaskID;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509a:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800509c:	f107 0314 	add.w	r3, r7, #20
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 fd9d 	bl	8005be0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80050a6:	bf00      	nop
 80050a8:	3728      	adds	r7, #40	@ 0x28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80050b6:	4b26      	ldr	r3, [pc, #152]	@ (8005150 <_DoInit+0xa0>)
 80050b8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80050ba:	22a8      	movs	r2, #168	@ 0xa8
 80050bc:	2100      	movs	r1, #0
 80050be:	6838      	ldr	r0, [r7, #0]
 80050c0:	f001 f8ec 	bl	800629c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2203      	movs	r2, #3
 80050c8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2203      	movs	r2, #3
 80050ce:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	4a20      	ldr	r2, [pc, #128]	@ (8005154 <_DoInit+0xa4>)
 80050d4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005158 <_DoInit+0xa8>)
 80050da:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80050e2:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2200      	movs	r2, #0
 80050e8:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2200      	movs	r2, #0
 80050ee:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2200      	movs	r2, #0
 80050f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	4a16      	ldr	r2, [pc, #88]	@ (8005154 <_DoInit+0xa4>)
 80050fa:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	4a17      	ldr	r2, [pc, #92]	@ (800515c <_DoInit+0xac>)
 8005100:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2210      	movs	r2, #16
 8005106:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2200      	movs	r2, #0
 800510c:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2200      	movs	r2, #0
 8005112:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	2200      	movs	r2, #0
 8005118:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800511a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800511e:	2300      	movs	r3, #0
 8005120:	607b      	str	r3, [r7, #4]
 8005122:	e00c      	b.n	800513e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f1c3 030f 	rsb	r3, r3, #15
 800512a:	4a0d      	ldr	r2, [pc, #52]	@ (8005160 <_DoInit+0xb0>)
 800512c:	5cd1      	ldrb	r1, [r2, r3]
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4413      	add	r3, r2
 8005134:	460a      	mov	r2, r1
 8005136:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3301      	adds	r3, #1
 800513c:	607b      	str	r3, [r7, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b0f      	cmp	r3, #15
 8005142:	d9ef      	bls.n	8005124 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005144:	f3bf 8f5f 	dmb	sy
}
 8005148:	bf00      	nop
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	20012eec 	.word	0x20012eec
 8005154:	080063b8 	.word	0x080063b8
 8005158:	20012f94 	.word	0x20012f94
 800515c:	20013394 	.word	0x20013394
 8005160:	080063dc 	.word	0x080063dc

08005164 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005164:	b580      	push	{r7, lr}
 8005166:	b08c      	sub	sp, #48	@ 0x30
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005170:	4b3e      	ldr	r3, [pc, #248]	@ (800526c <SEGGER_RTT_ReadNoLock+0x108>)
 8005172:	623b      	str	r3, [r7, #32]
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b53      	cmp	r3, #83	@ 0x53
 800517c:	d001      	beq.n	8005182 <SEGGER_RTT_ReadNoLock+0x1e>
 800517e:	f7ff ff97 	bl	80050b0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4613      	mov	r3, r2
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	4413      	add	r3, r2
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	3360      	adds	r3, #96	@ 0x60
 800518e:	4a37      	ldr	r2, [pc, #220]	@ (800526c <SEGGER_RTT_ReadNoLock+0x108>)
 8005190:	4413      	add	r3, r2
 8005192:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80051a4:	2300      	movs	r3, #0
 80051a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80051a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d92b      	bls.n	8005208 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4293      	cmp	r3, r2
 80051c0:	bf28      	it	cs
 80051c2:	4613      	movcs	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051cc:	4413      	add	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	6939      	ldr	r1, [r7, #16]
 80051d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80051d6:	f001 f88d 	bl	80062f4 <memcpy>
    NumBytesRead += NumBytesRem;
 80051da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	4413      	add	r3, r2
 80051e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80051e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	4413      	add	r3, r2
 80051e8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80051f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	4413      	add	r3, r2
 80051f8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005200:	429a      	cmp	r2, r3
 8005202:	d101      	bne.n	8005208 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005204:	2300      	movs	r3, #0
 8005206:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4293      	cmp	r3, r2
 8005216:	bf28      	it	cs
 8005218:	4613      	movcs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d019      	beq.n	8005256 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005228:	4413      	add	r3, r2
 800522a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	6939      	ldr	r1, [r7, #16]
 8005230:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005232:	f001 f85f 	bl	80062f4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005236:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	4413      	add	r3, r2
 800523c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800523e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	4413      	add	r3, r2
 8005244:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800524e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	4413      	add	r3, r2
 8005254:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005260:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005264:	4618      	mov	r0, r3
 8005266:	3730      	adds	r7, #48	@ 0x30
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	20012eec 	.word	0x20012eec

08005270 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	60fa      	str	r2, [r7, #12]
 8005286:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b80      	cmp	r3, #128	@ 0x80
 800528c:	d90a      	bls.n	80052a4 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800528e:	2380      	movs	r3, #128	@ 0x80
 8005290:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005292:	e007      	b.n	80052a4 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	1c53      	adds	r3, r2, #1
 8005298:	60bb      	str	r3, [r7, #8]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	1c59      	adds	r1, r3, #1
 800529e:	60f9      	str	r1, [r7, #12]
 80052a0:	7812      	ldrb	r2, [r2, #0]
 80052a2:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	1e5a      	subs	r2, r3, #1
 80052a8:	607a      	str	r2, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <_EncodeStr+0x46>
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1ee      	bne.n	8005294 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80052c2:	68fb      	ldr	r3, [r7, #12]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	371c      	adds	r7, #28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3307      	adds	r3, #7
}
 80052dc:	4618      	mov	r0, r3
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80052ee:	4b34      	ldr	r3, [pc, #208]	@ (80053c0 <_HandleIncomingPacket+0xd8>)
 80052f0:	7e1b      	ldrb	r3, [r3, #24]
 80052f2:	4618      	mov	r0, r3
 80052f4:	1cfb      	adds	r3, r7, #3
 80052f6:	2201      	movs	r2, #1
 80052f8:	4619      	mov	r1, r3
 80052fa:	f7ff ff33 	bl	8005164 <SEGGER_RTT_ReadNoLock>
 80052fe:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d057      	beq.n	80053b6 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8005306:	78fb      	ldrb	r3, [r7, #3]
 8005308:	2b80      	cmp	r3, #128	@ 0x80
 800530a:	d031      	beq.n	8005370 <_HandleIncomingPacket+0x88>
 800530c:	2b80      	cmp	r3, #128	@ 0x80
 800530e:	dc40      	bgt.n	8005392 <_HandleIncomingPacket+0xaa>
 8005310:	2b07      	cmp	r3, #7
 8005312:	dc15      	bgt.n	8005340 <_HandleIncomingPacket+0x58>
 8005314:	2b00      	cmp	r3, #0
 8005316:	dd3c      	ble.n	8005392 <_HandleIncomingPacket+0xaa>
 8005318:	3b01      	subs	r3, #1
 800531a:	2b06      	cmp	r3, #6
 800531c:	d839      	bhi.n	8005392 <_HandleIncomingPacket+0xaa>
 800531e:	a201      	add	r2, pc, #4	@ (adr r2, 8005324 <_HandleIncomingPacket+0x3c>)
 8005320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005324:	08005347 	.word	0x08005347
 8005328:	0800534d 	.word	0x0800534d
 800532c:	08005353 	.word	0x08005353
 8005330:	08005359 	.word	0x08005359
 8005334:	0800535f 	.word	0x0800535f
 8005338:	08005365 	.word	0x08005365
 800533c:	0800536b 	.word	0x0800536b
 8005340:	2b7f      	cmp	r3, #127	@ 0x7f
 8005342:	d033      	beq.n	80053ac <_HandleIncomingPacket+0xc4>
 8005344:	e025      	b.n	8005392 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005346:	f000 fad1 	bl	80058ec <SEGGER_SYSVIEW_Start>
      break;
 800534a:	e034      	b.n	80053b6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800534c:	f000 fb88 	bl	8005a60 <SEGGER_SYSVIEW_Stop>
      break;
 8005350:	e031      	b.n	80053b6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005352:	f000 fd3d 	bl	8005dd0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005356:	e02e      	b.n	80053b6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005358:	f000 fd26 	bl	8005da8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800535c:	e02b      	b.n	80053b6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800535e:	f000 fba5 	bl	8005aac <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005362:	e028      	b.n	80053b6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005364:	f000 fef0 	bl	8006148 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005368:	e025      	b.n	80053b6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800536a:	f000 fecf 	bl	800610c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800536e:	e022      	b.n	80053b6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005370:	4b13      	ldr	r3, [pc, #76]	@ (80053c0 <_HandleIncomingPacket+0xd8>)
 8005372:	7e1b      	ldrb	r3, [r3, #24]
 8005374:	4618      	mov	r0, r3
 8005376:	1cfb      	adds	r3, r7, #3
 8005378:	2201      	movs	r2, #1
 800537a:	4619      	mov	r1, r3
 800537c:	f7ff fef2 	bl	8005164 <SEGGER_RTT_ReadNoLock>
 8005380:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d013      	beq.n	80053b0 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fe34 	bl	8005ff8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005390:	e00e      	b.n	80053b0 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005392:	78fb      	ldrb	r3, [r7, #3]
 8005394:	b25b      	sxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	da0c      	bge.n	80053b4 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800539a:	4b09      	ldr	r3, [pc, #36]	@ (80053c0 <_HandleIncomingPacket+0xd8>)
 800539c:	7e1b      	ldrb	r3, [r3, #24]
 800539e:	4618      	mov	r0, r3
 80053a0:	1cfb      	adds	r3, r7, #3
 80053a2:	2201      	movs	r2, #1
 80053a4:	4619      	mov	r1, r3
 80053a6:	f7ff fedd 	bl	8005164 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80053aa:	e003      	b.n	80053b4 <_HandleIncomingPacket+0xcc>
      break;
 80053ac:	bf00      	nop
 80053ae:	e002      	b.n	80053b6 <_HandleIncomingPacket+0xce>
      break;
 80053b0:	bf00      	nop
 80053b2:	e000      	b.n	80053b6 <_HandleIncomingPacket+0xce>
      break;
 80053b4:	bf00      	nop
    }
  }
}
 80053b6:	bf00      	nop
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	200133a4 	.word	0x200133a4

080053c4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b08c      	sub	sp, #48	@ 0x30
 80053c8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80053ca:	2301      	movs	r3, #1
 80053cc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80053ce:	1d3b      	adds	r3, r7, #4
 80053d0:	3301      	adds	r3, #1
 80053d2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053d8:	4b31      	ldr	r3, [pc, #196]	@ (80054a0 <_TrySendOverflowPacket+0xdc>)
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053de:	e00b      	b.n	80053f8 <_TrySendOverflowPacket+0x34>
 80053e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e6:	1c59      	adds	r1, r3, #1
 80053e8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80053ea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f4:	09db      	lsrs	r3, r3, #7
 80053f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80053fc:	d8f0      	bhi.n	80053e0 <_TrySendOverflowPacket+0x1c>
 80053fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005404:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	701a      	strb	r2, [r3, #0]
 800540a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800540c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800540e:	4b25      	ldr	r3, [pc, #148]	@ (80054a4 <_TrySendOverflowPacket+0xe0>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005414:	4b22      	ldr	r3, [pc, #136]	@ (80054a0 <_TrySendOverflowPacket+0xdc>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	627b      	str	r3, [r7, #36]	@ 0x24
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	623b      	str	r3, [r7, #32]
 8005426:	e00b      	b.n	8005440 <_TrySendOverflowPacket+0x7c>
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	b2da      	uxtb	r2, r3
 800542c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542e:	1c59      	adds	r1, r3, #1
 8005430:	6279      	str	r1, [r7, #36]	@ 0x24
 8005432:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	701a      	strb	r2, [r3, #0]
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	09db      	lsrs	r3, r3, #7
 800543e:	623b      	str	r3, [r7, #32]
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	2b7f      	cmp	r3, #127	@ 0x7f
 8005444:	d8f0      	bhi.n	8005428 <_TrySendOverflowPacket+0x64>
 8005446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	627a      	str	r2, [r7, #36]	@ 0x24
 800544c:	6a3a      	ldr	r2, [r7, #32]
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]
 8005452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005454:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005456:	4b12      	ldr	r3, [pc, #72]	@ (80054a0 <_TrySendOverflowPacket+0xdc>)
 8005458:	785b      	ldrb	r3, [r3, #1]
 800545a:	4618      	mov	r0, r3
 800545c:	1d3b      	adds	r3, r7, #4
 800545e:	69fa      	ldr	r2, [r7, #28]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	461a      	mov	r2, r3
 8005464:	1d3b      	adds	r3, r7, #4
 8005466:	4619      	mov	r1, r3
 8005468:	f7fa feb2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800546c:	4603      	mov	r3, r0
 800546e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d009      	beq.n	800548a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005476:	4a0a      	ldr	r2, [pc, #40]	@ (80054a0 <_TrySendOverflowPacket+0xdc>)
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800547c:	4b08      	ldr	r3, [pc, #32]	@ (80054a0 <_TrySendOverflowPacket+0xdc>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	3b01      	subs	r3, #1
 8005482:	b2da      	uxtb	r2, r3
 8005484:	4b06      	ldr	r3, [pc, #24]	@ (80054a0 <_TrySendOverflowPacket+0xdc>)
 8005486:	701a      	strb	r2, [r3, #0]
 8005488:	e004      	b.n	8005494 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800548a:	4b05      	ldr	r3, [pc, #20]	@ (80054a0 <_TrySendOverflowPacket+0xdc>)
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	3301      	adds	r3, #1
 8005490:	4a03      	ldr	r2, [pc, #12]	@ (80054a0 <_TrySendOverflowPacket+0xdc>)
 8005492:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005494:	693b      	ldr	r3, [r7, #16]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3730      	adds	r7, #48	@ 0x30
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	200133a4 	.word	0x200133a4
 80054a4:	e0001004 	.word	0xe0001004

080054a8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08a      	sub	sp, #40	@ 0x28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80054b4:	4b98      	ldr	r3, [pc, #608]	@ (8005718 <_SendPacket+0x270>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d010      	beq.n	80054de <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80054bc:	4b96      	ldr	r3, [pc, #600]	@ (8005718 <_SendPacket+0x270>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 812d 	beq.w	8005720 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80054c6:	4b94      	ldr	r3, [pc, #592]	@ (8005718 <_SendPacket+0x270>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d109      	bne.n	80054e2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80054ce:	f7ff ff79 	bl	80053c4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80054d2:	4b91      	ldr	r3, [pc, #580]	@ (8005718 <_SendPacket+0x270>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	f040 8124 	bne.w	8005724 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80054dc:	e001      	b.n	80054e2 <_SendPacket+0x3a>
    goto Send;
 80054de:	bf00      	nop
 80054e0:	e000      	b.n	80054e4 <_SendPacket+0x3c>
Send:
 80054e2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b1f      	cmp	r3, #31
 80054e8:	d809      	bhi.n	80054fe <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80054ea:	4b8b      	ldr	r3, [pc, #556]	@ (8005718 <_SendPacket+0x270>)
 80054ec:	69da      	ldr	r2, [r3, #28]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	fa22 f303 	lsr.w	r3, r2, r3
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f040 8115 	bne.w	8005728 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b17      	cmp	r3, #23
 8005502:	d807      	bhi.n	8005514 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	3b01      	subs	r3, #1
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	b2da      	uxtb	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	e0c4      	b.n	800569e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005520:	d912      	bls.n	8005548 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	09da      	lsrs	r2, r3, #7
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3b01      	subs	r3, #1
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	b2db      	uxtb	r3, r3
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	3a01      	subs	r2, #1
 800553a:	60fa      	str	r2, [r7, #12]
 800553c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005540:	b2da      	uxtb	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	701a      	strb	r2, [r3, #0]
 8005546:	e006      	b.n	8005556 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3b01      	subs	r3, #1
 800554c:	60fb      	str	r3, [r7, #12]
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	b2da      	uxtb	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b7e      	cmp	r3, #126	@ 0x7e
 800555a:	d807      	bhi.n	800556c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	3b01      	subs	r3, #1
 8005560:	60fb      	str	r3, [r7, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	b2da      	uxtb	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	701a      	strb	r2, [r3, #0]
 800556a:	e098      	b.n	800569e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005572:	d212      	bcs.n	800559a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	09da      	lsrs	r2, r3, #7
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	3b01      	subs	r3, #1
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	b2d2      	uxtb	r2, r2
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	b2db      	uxtb	r3, r3
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	3a01      	subs	r2, #1
 800558c:	60fa      	str	r2, [r7, #12]
 800558e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005592:	b2da      	uxtb	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	701a      	strb	r2, [r3, #0]
 8005598:	e081      	b.n	800569e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055a0:	d21d      	bcs.n	80055de <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	0b9a      	lsrs	r2, r3, #14
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3b01      	subs	r3, #1
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	b2d2      	uxtb	r2, r2
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	09db      	lsrs	r3, r3, #7
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	3a01      	subs	r2, #1
 80055bc:	60fa      	str	r2, [r7, #12]
 80055be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	3a01      	subs	r2, #1
 80055d0:	60fa      	str	r2, [r7, #12]
 80055d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	701a      	strb	r2, [r3, #0]
 80055dc:	e05f      	b.n	800569e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055e4:	d228      	bcs.n	8005638 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	0d5a      	lsrs	r2, r3, #21
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3b01      	subs	r3, #1
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	0b9b      	lsrs	r3, r3, #14
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	3a01      	subs	r2, #1
 8005600:	60fa      	str	r2, [r7, #12]
 8005602:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005606:	b2da      	uxtb	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	09db      	lsrs	r3, r3, #7
 8005610:	b2db      	uxtb	r3, r3
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	3a01      	subs	r2, #1
 8005616:	60fa      	str	r2, [r7, #12]
 8005618:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800561c:	b2da      	uxtb	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	b2db      	uxtb	r3, r3
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	3a01      	subs	r2, #1
 800562a:	60fa      	str	r2, [r7, #12]
 800562c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005630:	b2da      	uxtb	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	701a      	strb	r2, [r3, #0]
 8005636:	e032      	b.n	800569e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	0f1a      	lsrs	r2, r3, #28
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3b01      	subs	r3, #1
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	0d5b      	lsrs	r3, r3, #21
 800564c:	b2db      	uxtb	r3, r3
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	3a01      	subs	r2, #1
 8005652:	60fa      	str	r2, [r7, #12]
 8005654:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005658:	b2da      	uxtb	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	0b9b      	lsrs	r3, r3, #14
 8005662:	b2db      	uxtb	r3, r3
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	3a01      	subs	r2, #1
 8005668:	60fa      	str	r2, [r7, #12]
 800566a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800566e:	b2da      	uxtb	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	09db      	lsrs	r3, r3, #7
 8005678:	b2db      	uxtb	r3, r3
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	3a01      	subs	r2, #1
 800567e:	60fa      	str	r2, [r7, #12]
 8005680:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005684:	b2da      	uxtb	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	b2db      	uxtb	r3, r3
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	3a01      	subs	r2, #1
 8005692:	60fa      	str	r2, [r7, #12]
 8005694:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005698:	b2da      	uxtb	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800569e:	4b1f      	ldr	r3, [pc, #124]	@ (800571c <_SendPacket+0x274>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80056a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005718 <_SendPacket+0x270>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	623b      	str	r3, [r7, #32]
 80056b6:	e00b      	b.n	80056d0 <_SendPacket+0x228>
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056be:	1c59      	adds	r1, r3, #1
 80056c0:	6279      	str	r1, [r7, #36]	@ 0x24
 80056c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	09db      	lsrs	r3, r3, #7
 80056ce:	623b      	str	r3, [r7, #32]
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80056d4:	d8f0      	bhi.n	80056b8 <_SendPacket+0x210>
 80056d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	627a      	str	r2, [r7, #36]	@ 0x24
 80056dc:	6a3a      	ldr	r2, [r7, #32]
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	701a      	strb	r2, [r3, #0]
 80056e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80056e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005718 <_SendPacket+0x270>)
 80056e8:	785b      	ldrb	r3, [r3, #1]
 80056ea:	4618      	mov	r0, r3
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	461a      	mov	r2, r3
 80056f4:	68f9      	ldr	r1, [r7, #12]
 80056f6:	f7fa fd6b 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80056fa:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005702:	4a05      	ldr	r2, [pc, #20]	@ (8005718 <_SendPacket+0x270>)
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	60d3      	str	r3, [r2, #12]
 8005708:	e00f      	b.n	800572a <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800570a:	4b03      	ldr	r3, [pc, #12]	@ (8005718 <_SendPacket+0x270>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	3301      	adds	r3, #1
 8005710:	b2da      	uxtb	r2, r3
 8005712:	4b01      	ldr	r3, [pc, #4]	@ (8005718 <_SendPacket+0x270>)
 8005714:	701a      	strb	r2, [r3, #0]
 8005716:	e008      	b.n	800572a <_SendPacket+0x282>
 8005718:	200133a4 	.word	0x200133a4
 800571c:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005720:	bf00      	nop
 8005722:	e002      	b.n	800572a <_SendPacket+0x282>
      goto SendDone;
 8005724:	bf00      	nop
 8005726:	e000      	b.n	800572a <_SendPacket+0x282>
      goto SendDone;
 8005728:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800572a:	4b14      	ldr	r3, [pc, #80]	@ (800577c <_SendPacket+0x2d4>)
 800572c:	7e1b      	ldrb	r3, [r3, #24]
 800572e:	4619      	mov	r1, r3
 8005730:	4a13      	ldr	r2, [pc, #76]	@ (8005780 <_SendPacket+0x2d8>)
 8005732:	460b      	mov	r3, r1
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	440b      	add	r3, r1
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	4413      	add	r3, r2
 800573c:	336c      	adds	r3, #108	@ 0x6c
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	4b0e      	ldr	r3, [pc, #56]	@ (800577c <_SendPacket+0x2d4>)
 8005742:	7e1b      	ldrb	r3, [r3, #24]
 8005744:	4618      	mov	r0, r3
 8005746:	490e      	ldr	r1, [pc, #56]	@ (8005780 <_SendPacket+0x2d8>)
 8005748:	4603      	mov	r3, r0
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	4403      	add	r3, r0
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	440b      	add	r3, r1
 8005752:	3370      	adds	r3, #112	@ 0x70
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	429a      	cmp	r2, r3
 8005758:	d00b      	beq.n	8005772 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800575a:	4b08      	ldr	r3, [pc, #32]	@ (800577c <_SendPacket+0x2d4>)
 800575c:	789b      	ldrb	r3, [r3, #2]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d107      	bne.n	8005772 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005762:	4b06      	ldr	r3, [pc, #24]	@ (800577c <_SendPacket+0x2d4>)
 8005764:	2201      	movs	r2, #1
 8005766:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005768:	f7ff fdbe 	bl	80052e8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800576c:	4b03      	ldr	r3, [pc, #12]	@ (800577c <_SendPacket+0x2d4>)
 800576e:	2200      	movs	r2, #0
 8005770:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005772:	bf00      	nop
 8005774:	3728      	adds	r7, #40	@ 0x28
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	200133a4 	.word	0x200133a4
 8005780:	20012eec 	.word	0x20012eec

08005784 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800578c:	f3ef 8311 	mrs	r3, BASEPRI
 8005790:	f04f 0120 	mov.w	r1, #32
 8005794:	f381 8811 	msr	BASEPRI, r1
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	4808      	ldr	r0, [pc, #32]	@ (80057bc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800579c:	f7ff fd98 	bl	80052d0 <_PreparePacket>
 80057a0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	68b9      	ldr	r1, [r7, #8]
 80057a6:	68b8      	ldr	r0, [r7, #8]
 80057a8:	f7ff fe7e 	bl	80054a8 <_SendPacket>
  RECORD_END();
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f383 8811 	msr	BASEPRI, r3
}
 80057b2:	bf00      	nop
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	200133d4 	.word	0x200133d4

080057c0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80057ca:	f3ef 8311 	mrs	r3, BASEPRI
 80057ce:	f04f 0120 	mov.w	r1, #32
 80057d2:	f381 8811 	msr	BASEPRI, r1
 80057d6:	617b      	str	r3, [r7, #20]
 80057d8:	4816      	ldr	r0, [pc, #88]	@ (8005834 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80057da:	f7ff fd79 	bl	80052d0 <_PreparePacket>
 80057de:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	61fb      	str	r3, [r7, #28]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	61bb      	str	r3, [r7, #24]
 80057ec:	e00b      	b.n	8005806 <SEGGER_SYSVIEW_RecordU32+0x46>
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	1c59      	adds	r1, r3, #1
 80057f6:	61f9      	str	r1, [r7, #28]
 80057f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	701a      	strb	r2, [r3, #0]
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	09db      	lsrs	r3, r3, #7
 8005804:	61bb      	str	r3, [r7, #24]
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	2b7f      	cmp	r3, #127	@ 0x7f
 800580a:	d8f0      	bhi.n	80057ee <SEGGER_SYSVIEW_RecordU32+0x2e>
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	61fa      	str	r2, [r7, #28]
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	701a      	strb	r2, [r3, #0]
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	68f9      	ldr	r1, [r7, #12]
 8005820:	6938      	ldr	r0, [r7, #16]
 8005822:	f7ff fe41 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f383 8811 	msr	BASEPRI, r3
}
 800582c:	bf00      	nop
 800582e:	3720      	adds	r7, #32
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	200133d4 	.word	0x200133d4

08005838 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005838:	b580      	push	{r7, lr}
 800583a:	b08c      	sub	sp, #48	@ 0x30
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005844:	f3ef 8311 	mrs	r3, BASEPRI
 8005848:	f04f 0120 	mov.w	r1, #32
 800584c:	f381 8811 	msr	BASEPRI, r1
 8005850:	61fb      	str	r3, [r7, #28]
 8005852:	4825      	ldr	r0, [pc, #148]	@ (80058e8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005854:	f7ff fd3c 	bl	80052d0 <_PreparePacket>
 8005858:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005866:	e00b      	b.n	8005880 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586a:	b2da      	uxtb	r2, r3
 800586c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800586e:	1c59      	adds	r1, r3, #1
 8005870:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005872:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005876:	b2d2      	uxtb	r2, r2
 8005878:	701a      	strb	r2, [r3, #0]
 800587a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800587c:	09db      	lsrs	r3, r3, #7
 800587e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005882:	2b7f      	cmp	r3, #127	@ 0x7f
 8005884:	d8f0      	bhi.n	8005868 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800588c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	701a      	strb	r2, [r3, #0]
 8005892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005894:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	627b      	str	r3, [r7, #36]	@ 0x24
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	623b      	str	r3, [r7, #32]
 800589e:	e00b      	b.n	80058b8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a6:	1c59      	adds	r1, r3, #1
 80058a8:	6279      	str	r1, [r7, #36]	@ 0x24
 80058aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	701a      	strb	r2, [r3, #0]
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	09db      	lsrs	r3, r3, #7
 80058b6:	623b      	str	r3, [r7, #32]
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80058bc:	d8f0      	bhi.n	80058a0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80058c4:	6a3a      	ldr	r2, [r7, #32]
 80058c6:	b2d2      	uxtb	r2, r2
 80058c8:	701a      	strb	r2, [r3, #0]
 80058ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058cc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	6979      	ldr	r1, [r7, #20]
 80058d2:	69b8      	ldr	r0, [r7, #24]
 80058d4:	f7ff fde8 	bl	80054a8 <_SendPacket>
  RECORD_END();
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	f383 8811 	msr	BASEPRI, r3
}
 80058de:	bf00      	nop
 80058e0:	3730      	adds	r7, #48	@ 0x30
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	200133d4 	.word	0x200133d4

080058ec <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b08c      	sub	sp, #48	@ 0x30
 80058f0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80058f2:	4b58      	ldr	r3, [pc, #352]	@ (8005a54 <SEGGER_SYSVIEW_Start+0x168>)
 80058f4:	2201      	movs	r2, #1
 80058f6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80058f8:	f3ef 8311 	mrs	r3, BASEPRI
 80058fc:	f04f 0120 	mov.w	r1, #32
 8005900:	f381 8811 	msr	BASEPRI, r1
 8005904:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005906:	4b53      	ldr	r3, [pc, #332]	@ (8005a54 <SEGGER_SYSVIEW_Start+0x168>)
 8005908:	785b      	ldrb	r3, [r3, #1]
 800590a:	220a      	movs	r2, #10
 800590c:	4952      	ldr	r1, [pc, #328]	@ (8005a58 <SEGGER_SYSVIEW_Start+0x16c>)
 800590e:	4618      	mov	r0, r3
 8005910:	f7fa fc5e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800591a:	200a      	movs	r0, #10
 800591c:	f7ff ff32 	bl	8005784 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005920:	f3ef 8311 	mrs	r3, BASEPRI
 8005924:	f04f 0120 	mov.w	r1, #32
 8005928:	f381 8811 	msr	BASEPRI, r1
 800592c:	60bb      	str	r3, [r7, #8]
 800592e:	484b      	ldr	r0, [pc, #300]	@ (8005a5c <SEGGER_SYSVIEW_Start+0x170>)
 8005930:	f7ff fcce 	bl	80052d0 <_PreparePacket>
 8005934:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800593e:	4b45      	ldr	r3, [pc, #276]	@ (8005a54 <SEGGER_SYSVIEW_Start+0x168>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005944:	e00b      	b.n	800595e <SEGGER_SYSVIEW_Start+0x72>
 8005946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005948:	b2da      	uxtb	r2, r3
 800594a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800594c:	1c59      	adds	r1, r3, #1
 800594e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005950:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	701a      	strb	r2, [r3, #0]
 8005958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595a:	09db      	lsrs	r3, r3, #7
 800595c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800595e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005960:	2b7f      	cmp	r3, #127	@ 0x7f
 8005962:	d8f0      	bhi.n	8005946 <SEGGER_SYSVIEW_Start+0x5a>
 8005964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800596a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800596c:	b2d2      	uxtb	r2, r2
 800596e:	701a      	strb	r2, [r3, #0]
 8005970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005972:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	627b      	str	r3, [r7, #36]	@ 0x24
 8005978:	4b36      	ldr	r3, [pc, #216]	@ (8005a54 <SEGGER_SYSVIEW_Start+0x168>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	623b      	str	r3, [r7, #32]
 800597e:	e00b      	b.n	8005998 <SEGGER_SYSVIEW_Start+0xac>
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	b2da      	uxtb	r2, r3
 8005984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005986:	1c59      	adds	r1, r3, #1
 8005988:	6279      	str	r1, [r7, #36]	@ 0x24
 800598a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	701a      	strb	r2, [r3, #0]
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	09db      	lsrs	r3, r3, #7
 8005996:	623b      	str	r3, [r7, #32]
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	2b7f      	cmp	r3, #127	@ 0x7f
 800599c:	d8f0      	bhi.n	8005980 <SEGGER_SYSVIEW_Start+0x94>
 800599e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	627a      	str	r2, [r7, #36]	@ 0x24
 80059a4:	6a3a      	ldr	r2, [r7, #32]
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ac:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	61fb      	str	r3, [r7, #28]
 80059b2:	4b28      	ldr	r3, [pc, #160]	@ (8005a54 <SEGGER_SYSVIEW_Start+0x168>)
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	61bb      	str	r3, [r7, #24]
 80059b8:	e00b      	b.n	80059d2 <SEGGER_SYSVIEW_Start+0xe6>
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	1c59      	adds	r1, r3, #1
 80059c2:	61f9      	str	r1, [r7, #28]
 80059c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059c8:	b2d2      	uxtb	r2, r2
 80059ca:	701a      	strb	r2, [r3, #0]
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	09db      	lsrs	r3, r3, #7
 80059d0:	61bb      	str	r3, [r7, #24]
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80059d6:	d8f0      	bhi.n	80059ba <SEGGER_SYSVIEW_Start+0xce>
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	61fa      	str	r2, [r7, #28]
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	b2d2      	uxtb	r2, r2
 80059e2:	701a      	strb	r2, [r3, #0]
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	617b      	str	r3, [r7, #20]
 80059ec:	2300      	movs	r3, #0
 80059ee:	613b      	str	r3, [r7, #16]
 80059f0:	e00b      	b.n	8005a0a <SEGGER_SYSVIEW_Start+0x11e>
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	1c59      	adds	r1, r3, #1
 80059fa:	6179      	str	r1, [r7, #20]
 80059fc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a00:	b2d2      	uxtb	r2, r2
 8005a02:	701a      	strb	r2, [r3, #0]
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	09db      	lsrs	r3, r3, #7
 8005a08:	613b      	str	r3, [r7, #16]
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a0e:	d8f0      	bhi.n	80059f2 <SEGGER_SYSVIEW_Start+0x106>
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	617a      	str	r2, [r7, #20]
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	701a      	strb	r2, [r3, #0]
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005a20:	2218      	movs	r2, #24
 8005a22:	6839      	ldr	r1, [r7, #0]
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f7ff fd3f 	bl	80054a8 <_SendPacket>
      RECORD_END();
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005a30:	4b08      	ldr	r3, [pc, #32]	@ (8005a54 <SEGGER_SYSVIEW_Start+0x168>)
 8005a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005a38:	4b06      	ldr	r3, [pc, #24]	@ (8005a54 <SEGGER_SYSVIEW_Start+0x168>)
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005a3e:	f000 f9c7 	bl	8005dd0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005a42:	f000 f9b1 	bl	8005da8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005a46:	f000 fb7f 	bl	8006148 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005a4a:	bf00      	nop
 8005a4c:	3730      	adds	r7, #48	@ 0x30
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	200133a4 	.word	0x200133a4
 8005a58:	080063f0 	.word	0x080063f0
 8005a5c:	200133d4 	.word	0x200133d4

08005a60 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005a66:	f3ef 8311 	mrs	r3, BASEPRI
 8005a6a:	f04f 0120 	mov.w	r1, #32
 8005a6e:	f381 8811 	msr	BASEPRI, r1
 8005a72:	607b      	str	r3, [r7, #4]
 8005a74:	480b      	ldr	r0, [pc, #44]	@ (8005aa4 <SEGGER_SYSVIEW_Stop+0x44>)
 8005a76:	f7ff fc2b 	bl	80052d0 <_PreparePacket>
 8005a7a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa8 <SEGGER_SYSVIEW_Stop+0x48>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d007      	beq.n	8005a94 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005a84:	220b      	movs	r2, #11
 8005a86:	6839      	ldr	r1, [r7, #0]
 8005a88:	6838      	ldr	r0, [r7, #0]
 8005a8a:	f7ff fd0d 	bl	80054a8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005a8e:	4b06      	ldr	r3, [pc, #24]	@ (8005aa8 <SEGGER_SYSVIEW_Stop+0x48>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f383 8811 	msr	BASEPRI, r3
}
 8005a9a:	bf00      	nop
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	200133d4 	.word	0x200133d4
 8005aa8:	200133a4 	.word	0x200133a4

08005aac <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b08c      	sub	sp, #48	@ 0x30
 8005ab0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ab2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ab6:	f04f 0120 	mov.w	r1, #32
 8005aba:	f381 8811 	msr	BASEPRI, r1
 8005abe:	60fb      	str	r3, [r7, #12]
 8005ac0:	4845      	ldr	r0, [pc, #276]	@ (8005bd8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005ac2:	f7ff fc05 	bl	80052d0 <_PreparePacket>
 8005ac6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ad0:	4b42      	ldr	r3, [pc, #264]	@ (8005bdc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ad6:	e00b      	b.n	8005af0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ade:	1c59      	adds	r1, r3, #1
 8005ae0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005ae2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ae6:	b2d2      	uxtb	r2, r2
 8005ae8:	701a      	strb	r2, [r3, #0]
 8005aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aec:	09db      	lsrs	r3, r3, #7
 8005aee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005af4:	d8f0      	bhi.n	8005ad8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005afc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005afe:	b2d2      	uxtb	r2, r2
 8005b00:	701a      	strb	r2, [r3, #0]
 8005b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b04:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b0a:	4b34      	ldr	r3, [pc, #208]	@ (8005bdc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	623b      	str	r3, [r7, #32]
 8005b10:	e00b      	b.n	8005b2a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b18:	1c59      	adds	r1, r3, #1
 8005b1a:	6279      	str	r1, [r7, #36]	@ 0x24
 8005b1c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b20:	b2d2      	uxtb	r2, r2
 8005b22:	701a      	strb	r2, [r3, #0]
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	09db      	lsrs	r3, r3, #7
 8005b28:	623b      	str	r3, [r7, #32]
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b2e:	d8f0      	bhi.n	8005b12 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b36:	6a3a      	ldr	r2, [r7, #32]
 8005b38:	b2d2      	uxtb	r2, r2
 8005b3a:	701a      	strb	r2, [r3, #0]
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	61fb      	str	r3, [r7, #28]
 8005b44:	4b25      	ldr	r3, [pc, #148]	@ (8005bdc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	61bb      	str	r3, [r7, #24]
 8005b4a:	e00b      	b.n	8005b64 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	1c59      	adds	r1, r3, #1
 8005b54:	61f9      	str	r1, [r7, #28]
 8005b56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	701a      	strb	r2, [r3, #0]
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	09db      	lsrs	r3, r3, #7
 8005b62:	61bb      	str	r3, [r7, #24]
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b68:	d8f0      	bhi.n	8005b4c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	1c5a      	adds	r2, r3, #1
 8005b6e:	61fa      	str	r2, [r7, #28]
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	b2d2      	uxtb	r2, r2
 8005b74:	701a      	strb	r2, [r3, #0]
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	617b      	str	r3, [r7, #20]
 8005b7e:	2300      	movs	r3, #0
 8005b80:	613b      	str	r3, [r7, #16]
 8005b82:	e00b      	b.n	8005b9c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	1c59      	adds	r1, r3, #1
 8005b8c:	6179      	str	r1, [r7, #20]
 8005b8e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b92:	b2d2      	uxtb	r2, r2
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	09db      	lsrs	r3, r3, #7
 8005b9a:	613b      	str	r3, [r7, #16]
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ba0:	d8f0      	bhi.n	8005b84 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	617a      	str	r2, [r7, #20]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	701a      	strb	r2, [r3, #0]
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005bb2:	2218      	movs	r2, #24
 8005bb4:	6879      	ldr	r1, [r7, #4]
 8005bb6:	68b8      	ldr	r0, [r7, #8]
 8005bb8:	f7ff fc76 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005bc2:	4b06      	ldr	r3, [pc, #24]	@ (8005bdc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005bca:	4b04      	ldr	r3, [pc, #16]	@ (8005bdc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bce:	4798      	blx	r3
  }
}
 8005bd0:	bf00      	nop
 8005bd2:	3730      	adds	r7, #48	@ 0x30
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	200133d4 	.word	0x200133d4
 8005bdc:	200133a4 	.word	0x200133a4

08005be0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b092      	sub	sp, #72	@ 0x48
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005be8:	f3ef 8311 	mrs	r3, BASEPRI
 8005bec:	f04f 0120 	mov.w	r1, #32
 8005bf0:	f381 8811 	msr	BASEPRI, r1
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	486a      	ldr	r0, [pc, #424]	@ (8005da0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005bf8:	f7ff fb6a 	bl	80052d0 <_PreparePacket>
 8005bfc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	4b66      	ldr	r3, [pc, #408]	@ (8005da4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c12:	e00b      	b.n	8005c2c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005c14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c1a:	1c59      	adds	r1, r3, #1
 8005c1c:	6479      	str	r1, [r7, #68]	@ 0x44
 8005c1e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]
 8005c26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c28:	09db      	lsrs	r3, r3, #7
 8005c2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c30:	d8f0      	bhi.n	8005c14 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005c32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	701a      	strb	r2, [r3, #0]
 8005c3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c4c:	e00b      	b.n	8005c66 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c54:	1c59      	adds	r1, r3, #1
 8005c56:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005c58:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	701a      	strb	r2, [r3, #0]
 8005c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c62:	09db      	lsrs	r3, r3, #7
 8005c64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c68:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c6a:	d8f0      	bhi.n	8005c4e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005c72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c74:	b2d2      	uxtb	r2, r2
 8005c76:	701a      	strb	r2, [r3, #0]
 8005c78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c7a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	2220      	movs	r2, #32
 8005c82:	4619      	mov	r1, r3
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f7ff faf3 	bl	8005270 <_EncodeStr>
 8005c8a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005c8c:	2209      	movs	r2, #9
 8005c8e:	68f9      	ldr	r1, [r7, #12]
 8005c90:	6938      	ldr	r0, [r7, #16]
 8005c92:	f7ff fc09 	bl	80054a8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	4b40      	ldr	r3, [pc, #256]	@ (8005da4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005caa:	e00b      	b.n	8005cc4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cb2:	1c59      	adds	r1, r3, #1
 8005cb4:	6379      	str	r1, [r7, #52]	@ 0x34
 8005cb6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	701a      	strb	r2, [r3, #0]
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc0:	09db      	lsrs	r3, r3, #7
 8005cc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cc8:	d8f0      	bhi.n	8005cac <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ccc:	1c5a      	adds	r2, r3, #1
 8005cce:	637a      	str	r2, [r7, #52]	@ 0x34
 8005cd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	701a      	strb	r2, [r3, #0]
 8005cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cd8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ce4:	e00b      	b.n	8005cfe <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cec:	1c59      	adds	r1, r3, #1
 8005cee:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005cf0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005cf4:	b2d2      	uxtb	r2, r2
 8005cf6:	701a      	strb	r2, [r3, #0]
 8005cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfa:	09db      	lsrs	r3, r3, #7
 8005cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d00:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d02:	d8f0      	bhi.n	8005ce6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d12:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	623b      	str	r3, [r7, #32]
 8005d1e:	e00b      	b.n	8005d38 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005d20:	6a3b      	ldr	r3, [r7, #32]
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d26:	1c59      	adds	r1, r3, #1
 8005d28:	6279      	str	r1, [r7, #36]	@ 0x24
 8005d2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	701a      	strb	r2, [r3, #0]
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	09db      	lsrs	r3, r3, #7
 8005d36:	623b      	str	r3, [r7, #32]
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d3c:	d8f0      	bhi.n	8005d20 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d44:	6a3a      	ldr	r2, [r7, #32]
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	701a      	strb	r2, [r3, #0]
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	61fb      	str	r3, [r7, #28]
 8005d52:	2300      	movs	r3, #0
 8005d54:	61bb      	str	r3, [r7, #24]
 8005d56:	e00b      	b.n	8005d70 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	1c59      	adds	r1, r3, #1
 8005d60:	61f9      	str	r1, [r7, #28]
 8005d62:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	09db      	lsrs	r3, r3, #7
 8005d6e:	61bb      	str	r3, [r7, #24]
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d74:	d8f0      	bhi.n	8005d58 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	61fa      	str	r2, [r7, #28]
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005d86:	2215      	movs	r2, #21
 8005d88:	68f9      	ldr	r1, [r7, #12]
 8005d8a:	6938      	ldr	r0, [r7, #16]
 8005d8c:	f7ff fb8c 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f383 8811 	msr	BASEPRI, r3
}
 8005d96:	bf00      	nop
 8005d98:	3748      	adds	r7, #72	@ 0x48
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	200133d4 	.word	0x200133d4
 8005da4:	200133a4 	.word	0x200133a4

08005da8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005dac:	4b07      	ldr	r3, [pc, #28]	@ (8005dcc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d008      	beq.n	8005dc6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005db4:	4b05      	ldr	r3, [pc, #20]	@ (8005dcc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005dbe:	4b03      	ldr	r3, [pc, #12]	@ (8005dcc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	4798      	blx	r3
  }
}
 8005dc6:	bf00      	nop
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	200133a4 	.word	0x200133a4

08005dd0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005dd0:	b590      	push	{r4, r7, lr}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005dd6:	4b15      	ldr	r3, [pc, #84]	@ (8005e2c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d01a      	beq.n	8005e14 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005dde:	4b13      	ldr	r3, [pc, #76]	@ (8005e2c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d015      	beq.n	8005e14 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005de8:	4b10      	ldr	r3, [pc, #64]	@ (8005e2c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4798      	blx	r3
 8005df0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005df4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005df6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dfa:	f04f 0200 	mov.w	r2, #0
 8005dfe:	f04f 0300 	mov.w	r3, #0
 8005e02:	000a      	movs	r2, r1
 8005e04:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005e06:	4613      	mov	r3, r2
 8005e08:	461a      	mov	r2, r3
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	200d      	movs	r0, #13
 8005e0e:	f7ff fd13 	bl	8005838 <SEGGER_SYSVIEW_RecordU32x2>
 8005e12:	e006      	b.n	8005e22 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005e14:	4b06      	ldr	r3, [pc, #24]	@ (8005e30 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4619      	mov	r1, r3
 8005e1a:	200c      	movs	r0, #12
 8005e1c:	f7ff fcd0 	bl	80057c0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005e20:	bf00      	nop
 8005e22:	bf00      	nop
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd90      	pop	{r4, r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	200133a4 	.word	0x200133a4
 8005e30:	e0001004 	.word	0xe0001004

08005e34 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e3a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e3e:	f04f 0120 	mov.w	r1, #32
 8005e42:	f381 8811 	msr	BASEPRI, r1
 8005e46:	607b      	str	r3, [r7, #4]
 8005e48:	4807      	ldr	r0, [pc, #28]	@ (8005e68 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005e4a:	f7ff fa41 	bl	80052d0 <_PreparePacket>
 8005e4e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005e50:	2211      	movs	r2, #17
 8005e52:	6839      	ldr	r1, [r7, #0]
 8005e54:	6838      	ldr	r0, [r7, #0]
 8005e56:	f7ff fb27 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f383 8811 	msr	BASEPRI, r3
}
 8005e60:	bf00      	nop
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	200133d4 	.word	0x200133d4

08005e6c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b088      	sub	sp, #32
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005e74:	f3ef 8311 	mrs	r3, BASEPRI
 8005e78:	f04f 0120 	mov.w	r1, #32
 8005e7c:	f381 8811 	msr	BASEPRI, r1
 8005e80:	617b      	str	r3, [r7, #20]
 8005e82:	4819      	ldr	r0, [pc, #100]	@ (8005ee8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005e84:	f7ff fa24 	bl	80052d0 <_PreparePacket>
 8005e88:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005e8e:	4b17      	ldr	r3, [pc, #92]	@ (8005eec <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	61fb      	str	r3, [r7, #28]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	61bb      	str	r3, [r7, #24]
 8005ea0:	e00b      	b.n	8005eba <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	1c59      	adds	r1, r3, #1
 8005eaa:	61f9      	str	r1, [r7, #28]
 8005eac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005eb0:	b2d2      	uxtb	r2, r2
 8005eb2:	701a      	strb	r2, [r3, #0]
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	09db      	lsrs	r3, r3, #7
 8005eb8:	61bb      	str	r3, [r7, #24]
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ebe:	d8f0      	bhi.n	8005ea2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	61fa      	str	r2, [r7, #28]
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	b2d2      	uxtb	r2, r2
 8005eca:	701a      	strb	r2, [r3, #0]
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005ed0:	2208      	movs	r2, #8
 8005ed2:	68f9      	ldr	r1, [r7, #12]
 8005ed4:	6938      	ldr	r0, [r7, #16]
 8005ed6:	f7ff fae7 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f383 8811 	msr	BASEPRI, r3
}
 8005ee0:	bf00      	nop
 8005ee2:	3720      	adds	r7, #32
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	200133d4 	.word	0x200133d4
 8005eec:	200133a4 	.word	0x200133a4

08005ef0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b088      	sub	sp, #32
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005ef8:	f3ef 8311 	mrs	r3, BASEPRI
 8005efc:	f04f 0120 	mov.w	r1, #32
 8005f00:	f381 8811 	msr	BASEPRI, r1
 8005f04:	617b      	str	r3, [r7, #20]
 8005f06:	4819      	ldr	r0, [pc, #100]	@ (8005f6c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005f08:	f7ff f9e2 	bl	80052d0 <_PreparePacket>
 8005f0c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005f12:	4b17      	ldr	r3, [pc, #92]	@ (8005f70 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	61fb      	str	r3, [r7, #28]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	61bb      	str	r3, [r7, #24]
 8005f24:	e00b      	b.n	8005f3e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	1c59      	adds	r1, r3, #1
 8005f2e:	61f9      	str	r1, [r7, #28]
 8005f30:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f34:	b2d2      	uxtb	r2, r2
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	09db      	lsrs	r3, r3, #7
 8005f3c:	61bb      	str	r3, [r7, #24]
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f42:	d8f0      	bhi.n	8005f26 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	61fa      	str	r2, [r7, #28]
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	b2d2      	uxtb	r2, r2
 8005f4e:	701a      	strb	r2, [r3, #0]
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005f54:	2204      	movs	r2, #4
 8005f56:	68f9      	ldr	r1, [r7, #12]
 8005f58:	6938      	ldr	r0, [r7, #16]
 8005f5a:	f7ff faa5 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f383 8811 	msr	BASEPRI, r3
}
 8005f64:	bf00      	nop
 8005f66:	3720      	adds	r7, #32
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	200133d4 	.word	0x200133d4
 8005f70:	200133a4 	.word	0x200133a4

08005f74 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f7c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f80:	f04f 0120 	mov.w	r1, #32
 8005f84:	f381 8811 	msr	BASEPRI, r1
 8005f88:	617b      	str	r3, [r7, #20]
 8005f8a:	4819      	ldr	r0, [pc, #100]	@ (8005ff0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005f8c:	f7ff f9a0 	bl	80052d0 <_PreparePacket>
 8005f90:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005f96:	4b17      	ldr	r3, [pc, #92]	@ (8005ff4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	61fb      	str	r3, [r7, #28]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	61bb      	str	r3, [r7, #24]
 8005fa8:	e00b      	b.n	8005fc2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	1c59      	adds	r1, r3, #1
 8005fb2:	61f9      	str	r1, [r7, #28]
 8005fb4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fb8:	b2d2      	uxtb	r2, r2
 8005fba:	701a      	strb	r2, [r3, #0]
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	09db      	lsrs	r3, r3, #7
 8005fc0:	61bb      	str	r3, [r7, #24]
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fc6:	d8f0      	bhi.n	8005faa <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	61fa      	str	r2, [r7, #28]
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	b2d2      	uxtb	r2, r2
 8005fd2:	701a      	strb	r2, [r3, #0]
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005fd8:	2206      	movs	r2, #6
 8005fda:	68f9      	ldr	r1, [r7, #12]
 8005fdc:	6938      	ldr	r0, [r7, #16]
 8005fde:	f7ff fa63 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f383 8811 	msr	BASEPRI, r3
}
 8005fe8:	bf00      	nop
 8005fea:	3720      	adds	r7, #32
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	200133d4 	.word	0x200133d4
 8005ff4:	200133a4 	.word	0x200133a4

08005ff8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08c      	sub	sp, #48	@ 0x30
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	4603      	mov	r3, r0
 8006000:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006002:	4b40      	ldr	r3, [pc, #256]	@ (8006104 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d077      	beq.n	80060fa <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800600a:	4b3e      	ldr	r3, [pc, #248]	@ (8006104 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006010:	2300      	movs	r3, #0
 8006012:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006014:	e008      	b.n	8006028 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800601c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d007      	beq.n	8006032 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006024:	3301      	adds	r3, #1
 8006026:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006028:	79fb      	ldrb	r3, [r7, #7]
 800602a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800602c:	429a      	cmp	r2, r3
 800602e:	d3f2      	bcc.n	8006016 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006030:	e000      	b.n	8006034 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006032:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006036:	2b00      	cmp	r3, #0
 8006038:	d055      	beq.n	80060e6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800603a:	f3ef 8311 	mrs	r3, BASEPRI
 800603e:	f04f 0120 	mov.w	r1, #32
 8006042:	f381 8811 	msr	BASEPRI, r1
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	482f      	ldr	r0, [pc, #188]	@ (8006108 <SEGGER_SYSVIEW_SendModule+0x110>)
 800604a:	f7ff f941 	bl	80052d0 <_PreparePacket>
 800604e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	627b      	str	r3, [r7, #36]	@ 0x24
 8006058:	79fb      	ldrb	r3, [r7, #7]
 800605a:	623b      	str	r3, [r7, #32]
 800605c:	e00b      	b.n	8006076 <SEGGER_SYSVIEW_SendModule+0x7e>
 800605e:	6a3b      	ldr	r3, [r7, #32]
 8006060:	b2da      	uxtb	r2, r3
 8006062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006064:	1c59      	adds	r1, r3, #1
 8006066:	6279      	str	r1, [r7, #36]	@ 0x24
 8006068:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800606c:	b2d2      	uxtb	r2, r2
 800606e:	701a      	strb	r2, [r3, #0]
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	09db      	lsrs	r3, r3, #7
 8006074:	623b      	str	r3, [r7, #32]
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	2b7f      	cmp	r3, #127	@ 0x7f
 800607a:	d8f0      	bhi.n	800605e <SEGGER_SYSVIEW_SendModule+0x66>
 800607c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	627a      	str	r2, [r7, #36]	@ 0x24
 8006082:	6a3a      	ldr	r2, [r7, #32]
 8006084:	b2d2      	uxtb	r2, r2
 8006086:	701a      	strb	r2, [r3, #0]
 8006088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	61fb      	str	r3, [r7, #28]
 8006090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	61bb      	str	r3, [r7, #24]
 8006096:	e00b      	b.n	80060b0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	b2da      	uxtb	r2, r3
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	1c59      	adds	r1, r3, #1
 80060a0:	61f9      	str	r1, [r7, #28]
 80060a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060a6:	b2d2      	uxtb	r2, r2
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	09db      	lsrs	r3, r3, #7
 80060ae:	61bb      	str	r3, [r7, #24]
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80060b4:	d8f0      	bhi.n	8006098 <SEGGER_SYSVIEW_SendModule+0xa0>
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	61fa      	str	r2, [r7, #28]
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	b2d2      	uxtb	r2, r2
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80060c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2280      	movs	r2, #128	@ 0x80
 80060cc:	4619      	mov	r1, r3
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f7ff f8ce 	bl	8005270 <_EncodeStr>
 80060d4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80060d6:	2216      	movs	r2, #22
 80060d8:	68f9      	ldr	r1, [r7, #12]
 80060da:	6938      	ldr	r0, [r7, #16]
 80060dc:	f7ff f9e4 	bl	80054a8 <_SendPacket>
      RECORD_END();
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80060e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d006      	beq.n	80060fa <SEGGER_SYSVIEW_SendModule+0x102>
 80060ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d002      	beq.n	80060fa <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80060f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	4798      	blx	r3
    }
  }
}
 80060fa:	bf00      	nop
 80060fc:	3730      	adds	r7, #48	@ 0x30
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	200133cc 	.word	0x200133cc
 8006108:	200133d4 	.word	0x200133d4

0800610c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006112:	4b0c      	ldr	r3, [pc, #48]	@ (8006144 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00f      	beq.n	800613a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800611a:	4b0a      	ldr	r3, [pc, #40]	@ (8006144 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d002      	beq.n	800612e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1f2      	bne.n	8006120 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800613a:	bf00      	nop
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	200133cc 	.word	0x200133cc

08006148 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800614e:	f3ef 8311 	mrs	r3, BASEPRI
 8006152:	f04f 0120 	mov.w	r1, #32
 8006156:	f381 8811 	msr	BASEPRI, r1
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	4817      	ldr	r0, [pc, #92]	@ (80061bc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800615e:	f7ff f8b7 	bl	80052d0 <_PreparePacket>
 8006162:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	4b14      	ldr	r3, [pc, #80]	@ (80061c0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	613b      	str	r3, [r7, #16]
 8006172:	e00b      	b.n	800618c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	b2da      	uxtb	r2, r3
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	1c59      	adds	r1, r3, #1
 800617c:	6179      	str	r1, [r7, #20]
 800617e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006182:	b2d2      	uxtb	r2, r2
 8006184:	701a      	strb	r2, [r3, #0]
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	09db      	lsrs	r3, r3, #7
 800618a:	613b      	str	r3, [r7, #16]
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006190:	d8f0      	bhi.n	8006174 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	617a      	str	r2, [r7, #20]
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	b2d2      	uxtb	r2, r2
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80061a2:	221b      	movs	r2, #27
 80061a4:	6879      	ldr	r1, [r7, #4]
 80061a6:	68b8      	ldr	r0, [r7, #8]
 80061a8:	f7ff f97e 	bl	80054a8 <_SendPacket>
  RECORD_END();
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f383 8811 	msr	BASEPRI, r3
}
 80061b2:	bf00      	nop
 80061b4:	3718      	adds	r7, #24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	200133d4 	.word	0x200133d4
 80061c0:	200133d0 	.word	0x200133d0

080061c4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b08a      	sub	sp, #40	@ 0x28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80061cc:	f3ef 8311 	mrs	r3, BASEPRI
 80061d0:	f04f 0120 	mov.w	r1, #32
 80061d4:	f381 8811 	msr	BASEPRI, r1
 80061d8:	617b      	str	r3, [r7, #20]
 80061da:	4827      	ldr	r0, [pc, #156]	@ (8006278 <SEGGER_SYSVIEW_Warn+0xb4>)
 80061dc:	f7ff f878 	bl	80052d0 <_PreparePacket>
 80061e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80061e2:	2280      	movs	r2, #128	@ 0x80
 80061e4:	6879      	ldr	r1, [r7, #4]
 80061e6:	6938      	ldr	r0, [r7, #16]
 80061e8:	f7ff f842 	bl	8005270 <_EncodeStr>
 80061ec:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80061f2:	2301      	movs	r3, #1
 80061f4:	623b      	str	r3, [r7, #32]
 80061f6:	e00b      	b.n	8006210 <SEGGER_SYSVIEW_Warn+0x4c>
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fe:	1c59      	adds	r1, r3, #1
 8006200:	6279      	str	r1, [r7, #36]	@ 0x24
 8006202:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	701a      	strb	r2, [r3, #0]
 800620a:	6a3b      	ldr	r3, [r7, #32]
 800620c:	09db      	lsrs	r3, r3, #7
 800620e:	623b      	str	r3, [r7, #32]
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	2b7f      	cmp	r3, #127	@ 0x7f
 8006214:	d8f0      	bhi.n	80061f8 <SEGGER_SYSVIEW_Warn+0x34>
 8006216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	627a      	str	r2, [r7, #36]	@ 0x24
 800621c:	6a3a      	ldr	r2, [r7, #32]
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	61fb      	str	r3, [r7, #28]
 800622a:	2300      	movs	r3, #0
 800622c:	61bb      	str	r3, [r7, #24]
 800622e:	e00b      	b.n	8006248 <SEGGER_SYSVIEW_Warn+0x84>
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	b2da      	uxtb	r2, r3
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	1c59      	adds	r1, r3, #1
 8006238:	61f9      	str	r1, [r7, #28]
 800623a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800623e:	b2d2      	uxtb	r2, r2
 8006240:	701a      	strb	r2, [r3, #0]
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	09db      	lsrs	r3, r3, #7
 8006246:	61bb      	str	r3, [r7, #24]
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	2b7f      	cmp	r3, #127	@ 0x7f
 800624c:	d8f0      	bhi.n	8006230 <SEGGER_SYSVIEW_Warn+0x6c>
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	1c5a      	adds	r2, r3, #1
 8006252:	61fa      	str	r2, [r7, #28]
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	b2d2      	uxtb	r2, r2
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800625e:	221a      	movs	r2, #26
 8006260:	68f9      	ldr	r1, [r7, #12]
 8006262:	6938      	ldr	r0, [r7, #16]
 8006264:	f7ff f920 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f383 8811 	msr	BASEPRI, r3
}
 800626e:	bf00      	nop
 8006270:	3728      	adds	r7, #40	@ 0x28
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	200133d4 	.word	0x200133d4

0800627c <memcmp>:
 800627c:	b510      	push	{r4, lr}
 800627e:	3901      	subs	r1, #1
 8006280:	4402      	add	r2, r0
 8006282:	4290      	cmp	r0, r2
 8006284:	d101      	bne.n	800628a <memcmp+0xe>
 8006286:	2000      	movs	r0, #0
 8006288:	e005      	b.n	8006296 <memcmp+0x1a>
 800628a:	7803      	ldrb	r3, [r0, #0]
 800628c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006290:	42a3      	cmp	r3, r4
 8006292:	d001      	beq.n	8006298 <memcmp+0x1c>
 8006294:	1b18      	subs	r0, r3, r4
 8006296:	bd10      	pop	{r4, pc}
 8006298:	3001      	adds	r0, #1
 800629a:	e7f2      	b.n	8006282 <memcmp+0x6>

0800629c <memset>:
 800629c:	4402      	add	r2, r0
 800629e:	4603      	mov	r3, r0
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d100      	bne.n	80062a6 <memset+0xa>
 80062a4:	4770      	bx	lr
 80062a6:	f803 1b01 	strb.w	r1, [r3], #1
 80062aa:	e7f9      	b.n	80062a0 <memset+0x4>

080062ac <__libc_init_array>:
 80062ac:	b570      	push	{r4, r5, r6, lr}
 80062ae:	4d0d      	ldr	r5, [pc, #52]	@ (80062e4 <__libc_init_array+0x38>)
 80062b0:	4c0d      	ldr	r4, [pc, #52]	@ (80062e8 <__libc_init_array+0x3c>)
 80062b2:	1b64      	subs	r4, r4, r5
 80062b4:	10a4      	asrs	r4, r4, #2
 80062b6:	2600      	movs	r6, #0
 80062b8:	42a6      	cmp	r6, r4
 80062ba:	d109      	bne.n	80062d0 <__libc_init_array+0x24>
 80062bc:	4d0b      	ldr	r5, [pc, #44]	@ (80062ec <__libc_init_array+0x40>)
 80062be:	4c0c      	ldr	r4, [pc, #48]	@ (80062f0 <__libc_init_array+0x44>)
 80062c0:	f000 f826 	bl	8006310 <_init>
 80062c4:	1b64      	subs	r4, r4, r5
 80062c6:	10a4      	asrs	r4, r4, #2
 80062c8:	2600      	movs	r6, #0
 80062ca:	42a6      	cmp	r6, r4
 80062cc:	d105      	bne.n	80062da <__libc_init_array+0x2e>
 80062ce:	bd70      	pop	{r4, r5, r6, pc}
 80062d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062d4:	4798      	blx	r3
 80062d6:	3601      	adds	r6, #1
 80062d8:	e7ee      	b.n	80062b8 <__libc_init_array+0xc>
 80062da:	f855 3b04 	ldr.w	r3, [r5], #4
 80062de:	4798      	blx	r3
 80062e0:	3601      	adds	r6, #1
 80062e2:	e7f2      	b.n	80062ca <__libc_init_array+0x1e>
 80062e4:	08006404 	.word	0x08006404
 80062e8:	08006404 	.word	0x08006404
 80062ec:	08006404 	.word	0x08006404
 80062f0:	08006408 	.word	0x08006408

080062f4 <memcpy>:
 80062f4:	440a      	add	r2, r1
 80062f6:	4291      	cmp	r1, r2
 80062f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80062fc:	d100      	bne.n	8006300 <memcpy+0xc>
 80062fe:	4770      	bx	lr
 8006300:	b510      	push	{r4, lr}
 8006302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006306:	f803 4f01 	strb.w	r4, [r3, #1]!
 800630a:	4291      	cmp	r1, r2
 800630c:	d1f9      	bne.n	8006302 <memcpy+0xe>
 800630e:	bd10      	pop	{r4, pc}

08006310 <_init>:
 8006310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006312:	bf00      	nop
 8006314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006316:	bc08      	pop	{r3}
 8006318:	469e      	mov	lr, r3
 800631a:	4770      	bx	lr

0800631c <_fini>:
 800631c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631e:	bf00      	nop
 8006320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006322:	bc08      	pop	{r3}
 8006324:	469e      	mov	lr, r3
 8006326:	4770      	bx	lr
